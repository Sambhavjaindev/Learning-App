package knowledgehb;
/**
 *
 * @author sambhav jain
 */

public class learningjava extends javax.swing.JFrame {
int len;
    /**
     * Creates new form KJava
     */
connect c;
    public learningjava(connect c) {
        initComponents();
        this.c=c;
        this.setLocationRelativeTo(null);
        this.setTitle("Java Learning");
        
        text.setLineWrap(true);
        basicspanel.setVisible(false);
        arraystringpanel.setVisible(false);
        oopspanel.setVisible(false);
        guipanel.setVisible(false);
        swingpanel.setVisible(false);
        layoutspanel.setVisible(false);
        eventspanel.setVisible(false);
        bestofjavapanel.setVisible(false);
        jdbcpanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        IntroB = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        basicspanel = new javax.swing.JPanel();
        elseifB = new javax.swing.JButton();
        ifbutton = new javax.swing.JButton();
        ifelseB = new javax.swing.JButton();
        arraystringpanel = new javax.swing.JPanel();
        arrarB = new javax.swing.JButton();
        stringB = new javax.swing.JButton();
        stringmaniB = new javax.swing.JButton();
        oopspanel = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        inheritancB = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        bestofjavapanel = new javax.swing.JPanel();
        classobjB22 = new javax.swing.JButton();
        classobjB25 = new javax.swing.JButton();
        classobjB23 = new javax.swing.JButton();
        classobjB26 = new javax.swing.JButton();
        classobjB24 = new javax.swing.JButton();
        jdbcpanel = new javax.swing.JPanel();
        classobjB29 = new javax.swing.JButton();
        classobjB27 = new javax.swing.JButton();
        classobjB28 = new javax.swing.JButton();
        guipanel = new javax.swing.JPanel();
        switchB3 = new javax.swing.JButton();
        eventspanel = new javax.swing.JPanel();
        classobjB20 = new javax.swing.JButton();
        classobjB18 = new javax.swing.JButton();
        classobjB21 = new javax.swing.JButton();
        classobjB16 = new javax.swing.JButton();
        classobjB19 = new javax.swing.JButton();
        classobjB17 = new javax.swing.JButton();
        switchB1 = new javax.swing.JButton();
        layoutspanel = new javax.swing.JPanel();
        classobjB15 = new javax.swing.JButton();
        classobjB14 = new javax.swing.JButton();
        classobjB11 = new javax.swing.JButton();
        classobjB12 = new javax.swing.JButton();
        classobjB13 = new javax.swing.JButton();
        classobjB10 = new javax.swing.JButton();
        switchB = new javax.swing.JButton();
        swingpanel = new javax.swing.JPanel();
        nesterdB = new javax.swing.JButton();
        classobjB = new javax.swing.JButton();
        classobjB6 = new javax.swing.JButton();
        classobjB1 = new javax.swing.JButton();
        classobjB4 = new javax.swing.JButton();
        classobjB5 = new javax.swing.JButton();
        classobjB2 = new javax.swing.JButton();
        classobjB9 = new javax.swing.JButton();
        classobjB3 = new javax.swing.JButton();
        PointerB = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        classobjB8 = new javax.swing.JButton();
        classobjB7 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        switchB2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(51, 255, 204));

        jLabel3.setBackground(new java.awt.Color(204, 204, 204));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javalearningimage.png"))); // NOI18N
        jLabel3.setOpaque(true);

        jPanel5.setBackground(new java.awt.Color(51, 255, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));

        jButton7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 0, 51));
        jButton7.setText("Object Oriented Java");
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setFocusPainted(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 0, 51));
        jButton2.setText("Array and Strings");
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setFocusPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 0, 51));
        jButton1.setText("Basics");
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        IntroB.setBackground(new java.awt.Color(255, 255, 255));
        IntroB.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        IntroB.setForeground(new java.awt.Color(0, 0, 153));
        IntroB.setText("Introduction");
        IntroB.setBorderPainted(false);
        IntroB.setContentAreaFilled(false);
        IntroB.setFocusPainted(false);
        IntroB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IntroBActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(0, 0, 204));
        jPanel3.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel3.setPreferredSize(new java.awt.Dimension(261, 2));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 255, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanel4.setBackground(new java.awt.Color(0, 0, 204));
        jPanel4.setPreferredSize(new java.awt.Dimension(261, 2));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 255, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(0, 0, 204));
        jPanel2.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel2.setPreferredSize(new java.awt.Dimension(261, 2));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 255, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        basicspanel.setBackground(new java.awt.Color(51, 255, 204));

        elseifB.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        elseifB.setForeground(new java.awt.Color(0, 0, 153));
        elseifB.setText("If else");
        elseifB.setBorderPainted(false);
        elseifB.setContentAreaFilled(false);
        elseifB.setFocusPainted(false);
        elseifB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        elseifB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elseifBActionPerformed(evt);
            }
        });

        ifbutton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ifbutton.setForeground(new java.awt.Color(0, 0, 153));
        ifbutton.setText("Console Output");
        ifbutton.setBorderPainted(false);
        ifbutton.setContentAreaFilled(false);
        ifbutton.setDefaultCapable(false);
        ifbutton.setFocusPainted(false);
        ifbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ifbuttonActionPerformed(evt);
            }
        });

        ifelseB.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ifelseB.setForeground(new java.awt.Color(0, 0, 153));
        ifelseB.setText("Console Input");
        ifelseB.setBorderPainted(false);
        ifelseB.setContentAreaFilled(false);
        ifelseB.setFocusPainted(false);
        ifelseB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ifelseB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ifelseBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout basicspanelLayout = new javax.swing.GroupLayout(basicspanel);
        basicspanel.setLayout(basicspanelLayout);
        basicspanelLayout.setHorizontalGroup(
            basicspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basicspanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(basicspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ifbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ifelseB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(elseifB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        basicspanelLayout.setVerticalGroup(
            basicspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basicspanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(ifbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(ifelseB, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(elseifB)
                .addGap(0, 0, 0))
        );

        arraystringpanel.setBackground(new java.awt.Color(51, 255, 204));

        arrarB.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        arrarB.setForeground(new java.awt.Color(0, 0, 153));
        arrarB.setText("Arrays");
        arrarB.setBorderPainted(false);
        arrarB.setContentAreaFilled(false);
        arrarB.setFocusPainted(false);
        arrarB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        arrarB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arrarBActionPerformed(evt);
            }
        });

        stringB.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        stringB.setForeground(new java.awt.Color(0, 0, 153));
        stringB.setText("Strings");
        stringB.setBorderPainted(false);
        stringB.setContentAreaFilled(false);
        stringB.setFocusPainted(false);
        stringB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        stringB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stringBActionPerformed(evt);
            }
        });

        stringmaniB.setBackground(new java.awt.Color(204, 204, 204));
        stringmaniB.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        stringmaniB.setForeground(new java.awt.Color(0, 0, 153));
        stringmaniB.setText("String Manipulations");
        stringmaniB.setBorderPainted(false);
        stringmaniB.setContentAreaFilled(false);
        stringmaniB.setFocusPainted(false);
        stringmaniB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stringmaniBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout arraystringpanelLayout = new javax.swing.GroupLayout(arraystringpanel);
        arraystringpanel.setLayout(arraystringpanelLayout);
        arraystringpanelLayout.setHorizontalGroup(
            arraystringpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(arraystringpanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(arraystringpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stringB, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stringmaniB)
                    .addComponent(arrarB, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
        arraystringpanelLayout.setVerticalGroup(
            arraystringpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(arraystringpanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(arrarB)
                .addGap(0, 0, 0)
                .addComponent(stringB)
                .addGap(0, 0, 0)
                .addComponent(stringmaniB, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        oopspanel.setBackground(new java.awt.Color(51, 255, 204));

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(0, 0, 153));
        jButton5.setText("Polymorphism");
        jButton5.setBorderPainted(false);
        jButton5.setContentAreaFilled(false);
        jButton5.setFocusPainted(false);
        jButton5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        inheritancB.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        inheritancB.setForeground(new java.awt.Color(0, 0, 153));
        inheritancB.setText("Inheritance");
        inheritancB.setBorderPainted(false);
        inheritancB.setContentAreaFilled(false);
        inheritancB.setFocusPainted(false);
        inheritancB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        inheritancB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inheritancBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout oopspanelLayout = new javax.swing.GroupLayout(oopspanel);
        oopspanel.setLayout(oopspanelLayout);
        oopspanelLayout.setHorizontalGroup(
            oopspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(oopspanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(oopspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(inheritancB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)))
        );
        oopspanelLayout.setVerticalGroup(
            oopspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(oopspanelLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(inheritancB)
                .addGap(0, 0, 0)
                .addComponent(jButton5)
                .addGap(1, 1, 1))
        );

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 0, 51));
        jButton8.setText("Graphical User Interface");
        jButton8.setBorderPainted(false);
        jButton8.setContentAreaFilled(false);
        jButton8.setFocusPainted(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton9.setForeground(new java.awt.Color(255, 0, 51));
        jButton9.setText("Best of Java");
        jButton9.setBorderPainted(false);
        jButton9.setContentAreaFilled(false);
        jButton9.setFocusPainted(false);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jPanel8.setBackground(new java.awt.Color(0, 0, 204));
        jPanel8.setPreferredSize(new java.awt.Dimension(261, 2));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 264, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jButton10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton10.setForeground(new java.awt.Color(255, 0, 51));
        jButton10.setText("JDBC");
        jButton10.setBorderPainted(false);
        jButton10.setContentAreaFilled(false);
        jButton10.setFocusPainted(false);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jPanel9.setBackground(new java.awt.Color(0, 0, 204));
        jPanel9.setPreferredSize(new java.awt.Dimension(261, 2));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 264, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        bestofjavapanel.setBackground(new java.awt.Color(51, 255, 204));

        classobjB22.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB22.setForeground(new java.awt.Color(0, 0, 153));
        classobjB22.setText("Exception Handling");
        classobjB22.setBorderPainted(false);
        classobjB22.setContentAreaFilled(false);
        classobjB22.setFocusPainted(false);
        classobjB22.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB22ActionPerformed(evt);
            }
        });

        classobjB25.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB25.setForeground(new java.awt.Color(0, 0, 153));
        classobjB25.setText("Threads");
        classobjB25.setBorderPainted(false);
        classobjB25.setContentAreaFilled(false);
        classobjB25.setFocusPainted(false);
        classobjB25.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB25ActionPerformed(evt);
            }
        });

        classobjB23.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB23.setForeground(new java.awt.Color(0, 0, 153));
        classobjB23.setText("Generics");
        classobjB23.setBorderPainted(false);
        classobjB23.setContentAreaFilled(false);
        classobjB23.setFocusPainted(false);
        classobjB23.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB23ActionPerformed(evt);
            }
        });

        classobjB26.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB26.setForeground(new java.awt.Color(0, 0, 153));
        classobjB26.setText("Collections");
        classobjB26.setBorderPainted(false);
        classobjB26.setContentAreaFilled(false);
        classobjB26.setFocusPainted(false);
        classobjB26.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB26ActionPerformed(evt);
            }
        });

        classobjB24.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB24.setForeground(new java.awt.Color(0, 0, 153));
        classobjB24.setText("Regular Expressions");
        classobjB24.setBorderPainted(false);
        classobjB24.setContentAreaFilled(false);
        classobjB24.setFocusPainted(false);
        classobjB24.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB24ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bestofjavapanelLayout = new javax.swing.GroupLayout(bestofjavapanel);
        bestofjavapanel.setLayout(bestofjavapanelLayout);
        bestofjavapanelLayout.setHorizontalGroup(
            bestofjavapanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bestofjavapanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(bestofjavapanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(classobjB24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(classobjB22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(classobjB23, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classobjB26, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classobjB25, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
        bestofjavapanelLayout.setVerticalGroup(
            bestofjavapanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bestofjavapanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(classobjB22)
                .addGap(0, 0, 0)
                .addComponent(classobjB23, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(classobjB24, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(classobjB26, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(classobjB25, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jdbcpanel.setBackground(new java.awt.Color(51, 255, 204));

        classobjB29.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB29.setForeground(new java.awt.Color(0, 0, 153));
        classobjB29.setText("Types of Result Sets");
        classobjB29.setBorderPainted(false);
        classobjB29.setContentAreaFilled(false);
        classobjB29.setFocusPainted(false);
        classobjB29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB29ActionPerformed(evt);
            }
        });

        classobjB27.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB27.setForeground(new java.awt.Color(0, 0, 153));
        classobjB27.setText("Types of Drivers");
        classobjB27.setBorderPainted(false);
        classobjB27.setContentAreaFilled(false);
        classobjB27.setFocusPainted(false);
        classobjB27.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB27ActionPerformed(evt);
            }
        });

        classobjB28.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB28.setForeground(new java.awt.Color(0, 0, 153));
        classobjB28.setText("Using JDBC Api");
        classobjB28.setBorderPainted(false);
        classobjB28.setContentAreaFilled(false);
        classobjB28.setFocusPainted(false);
        classobjB28.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB28ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jdbcpanelLayout = new javax.swing.GroupLayout(jdbcpanel);
        jdbcpanel.setLayout(jdbcpanelLayout);
        jdbcpanelLayout.setHorizontalGroup(
            jdbcpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jdbcpanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jdbcpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(classobjB29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(classobjB27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(classobjB28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jdbcpanelLayout.setVerticalGroup(
            jdbcpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jdbcpanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(classobjB27, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(classobjB28, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(classobjB29, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        guipanel.setBackground(new java.awt.Color(51, 255, 204));

        switchB3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        switchB3.setForeground(new java.awt.Color(255, 0, 51));
        switchB3.setText("Events");
        switchB3.setBorderPainted(false);
        switchB3.setContentAreaFilled(false);
        switchB3.setFocusPainted(false);
        switchB3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchB3ActionPerformed(evt);
            }
        });

        eventspanel.setBackground(new java.awt.Color(51, 255, 204));

        classobjB20.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB20.setForeground(new java.awt.Color(0, 0, 153));
        classobjB20.setText("Window Event");
        classobjB20.setBorderPainted(false);
        classobjB20.setContentAreaFilled(false);
        classobjB20.setFocusPainted(false);
        classobjB20.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB20ActionPerformed(evt);
            }
        });

        classobjB18.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB18.setForeground(new java.awt.Color(0, 0, 153));
        classobjB18.setText("Key Event");
        classobjB18.setBorderPainted(false);
        classobjB18.setContentAreaFilled(false);
        classobjB18.setFocusPainted(false);
        classobjB18.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB18ActionPerformed(evt);
            }
        });

        classobjB21.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB21.setForeground(new java.awt.Color(0, 0, 153));
        classobjB21.setText("Focus Event");
        classobjB21.setBorderPainted(false);
        classobjB21.setContentAreaFilled(false);
        classobjB21.setFocusPainted(false);
        classobjB21.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB21ActionPerformed(evt);
            }
        });

        classobjB16.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB16.setForeground(new java.awt.Color(0, 0, 153));
        classobjB16.setText("Action Event");
        classobjB16.setBorderPainted(false);
        classobjB16.setContentAreaFilled(false);
        classobjB16.setFocusPainted(false);
        classobjB16.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB16ActionPerformed(evt);
            }
        });

        classobjB19.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB19.setForeground(new java.awt.Color(0, 0, 153));
        classobjB19.setText("Item Event");
        classobjB19.setBorderPainted(false);
        classobjB19.setContentAreaFilled(false);
        classobjB19.setFocusPainted(false);
        classobjB19.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB19ActionPerformed(evt);
            }
        });

        classobjB17.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB17.setForeground(new java.awt.Color(0, 0, 153));
        classobjB17.setText("Mouse Event");
        classobjB17.setBorderPainted(false);
        classobjB17.setContentAreaFilled(false);
        classobjB17.setFocusPainted(false);
        classobjB17.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout eventspanelLayout = new javax.swing.GroupLayout(eventspanel);
        eventspanel.setLayout(eventspanelLayout);
        eventspanelLayout.setHorizontalGroup(
            eventspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventspanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(eventspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(classobjB20, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(eventspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(classobjB19, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(classobjB18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(classobjB17, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                        .addComponent(classobjB21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(classobjB16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        eventspanelLayout.setVerticalGroup(
            eventspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventspanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(classobjB16, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(classobjB18, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(classobjB17, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(classobjB21, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(classobjB19, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(classobjB20, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        switchB1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        switchB1.setForeground(new java.awt.Color(255, 0, 51));
        switchB1.setText("Layouts");
        switchB1.setBorderPainted(false);
        switchB1.setContentAreaFilled(false);
        switchB1.setFocusPainted(false);
        switchB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchB1ActionPerformed(evt);
            }
        });

        layoutspanel.setBackground(new java.awt.Color(51, 255, 204));

        classobjB15.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB15.setForeground(new java.awt.Color(0, 0, 153));
        classobjB15.setText("Grid Bag Layout");
        classobjB15.setBorderPainted(false);
        classobjB15.setContentAreaFilled(false);
        classobjB15.setFocusPainted(false);
        classobjB15.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB15ActionPerformed(evt);
            }
        });

        classobjB14.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB14.setForeground(new java.awt.Color(0, 0, 153));
        classobjB14.setText("Box Layout");
        classobjB14.setBorderPainted(false);
        classobjB14.setContentAreaFilled(false);
        classobjB14.setFocusPainted(false);
        classobjB14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB14ActionPerformed(evt);
            }
        });

        classobjB11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB11.setForeground(new java.awt.Color(0, 0, 153));
        classobjB11.setText("Group Layout");
        classobjB11.setBorderPainted(false);
        classobjB11.setContentAreaFilled(false);
        classobjB11.setFocusPainted(false);
        classobjB11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB11ActionPerformed(evt);
            }
        });

        classobjB12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB12.setForeground(new java.awt.Color(0, 0, 153));
        classobjB12.setText("Border Layout");
        classobjB12.setBorderPainted(false);
        classobjB12.setContentAreaFilled(false);
        classobjB12.setFocusPainted(false);
        classobjB12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB12ActionPerformed(evt);
            }
        });

        classobjB13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB13.setForeground(new java.awt.Color(0, 0, 153));
        classobjB13.setText("Grid Layout");
        classobjB13.setBorderPainted(false);
        classobjB13.setContentAreaFilled(false);
        classobjB13.setFocusPainted(false);
        classobjB13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB13ActionPerformed(evt);
            }
        });

        classobjB10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB10.setForeground(new java.awt.Color(0, 0, 153));
        classobjB10.setText("Flow Layout");
        classobjB10.setBorderPainted(false);
        classobjB10.setContentAreaFilled(false);
        classobjB10.setFocusPainted(false);
        classobjB10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layoutspanelLayout = new javax.swing.GroupLayout(layoutspanel);
        layoutspanel.setLayout(layoutspanelLayout);
        layoutspanelLayout.setHorizontalGroup(
            layoutspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layoutspanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layoutspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(classobjB10, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layoutspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(classobjB15)
                        .addComponent(classobjB14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(classobjB13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(classobjB12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(classobjB11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layoutspanelLayout.setVerticalGroup(
            layoutspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layoutspanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(classobjB10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(classobjB12, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(classobjB13, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(classobjB15, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(classobjB14, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(classobjB11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        switchB.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        switchB.setForeground(new java.awt.Color(255, 0, 51));
        switchB.setText("Swing Components");
        switchB.setBorderPainted(false);
        switchB.setContentAreaFilled(false);
        switchB.setFocusPainted(false);
        switchB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchBActionPerformed(evt);
            }
        });

        swingpanel.setBackground(new java.awt.Color(51, 255, 204));

        nesterdB.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        nesterdB.setForeground(new java.awt.Color(0, 0, 153));
        nesterdB.setText("JTabbedPane");
        nesterdB.setBorderPainted(false);
        nesterdB.setContentAreaFilled(false);
        nesterdB.setFocusPainted(false);
        nesterdB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        nesterdB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nesterdBActionPerformed(evt);
            }
        });

        classobjB.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB.setForeground(new java.awt.Color(0, 0, 153));
        classobjB.setText("Menus");
        classobjB.setBorderPainted(false);
        classobjB.setContentAreaFilled(false);
        classobjB.setFocusPainted(false);
        classobjB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjBActionPerformed(evt);
            }
        });

        classobjB6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB6.setForeground(new java.awt.Color(0, 0, 153));
        classobjB6.setText("JRadioButton");
        classobjB6.setBorderPainted(false);
        classobjB6.setContentAreaFilled(false);
        classobjB6.setFocusPainted(false);
        classobjB6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB6ActionPerformed(evt);
            }
        });

        classobjB1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB1.setForeground(new java.awt.Color(0, 0, 153));
        classobjB1.setText("JTextArea");
        classobjB1.setBorderPainted(false);
        classobjB1.setContentAreaFilled(false);
        classobjB1.setFocusPainted(false);
        classobjB1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB1ActionPerformed(evt);
            }
        });

        classobjB4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB4.setForeground(new java.awt.Color(0, 0, 153));
        classobjB4.setText("JComboBox");
        classobjB4.setBorderPainted(false);
        classobjB4.setContentAreaFilled(false);
        classobjB4.setFocusPainted(false);
        classobjB4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB4ActionPerformed(evt);
            }
        });

        classobjB5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB5.setForeground(new java.awt.Color(0, 0, 153));
        classobjB5.setText("JCheckBox");
        classobjB5.setBorderPainted(false);
        classobjB5.setContentAreaFilled(false);
        classobjB5.setFocusPainted(false);
        classobjB5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB5ActionPerformed(evt);
            }
        });

        classobjB2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB2.setForeground(new java.awt.Color(0, 0, 153));
        classobjB2.setText("JLabel");
        classobjB2.setBorderPainted(false);
        classobjB2.setContentAreaFilled(false);
        classobjB2.setFocusPainted(false);
        classobjB2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB2ActionPerformed(evt);
            }
        });

        classobjB9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB9.setForeground(new java.awt.Color(0, 0, 153));
        classobjB9.setText("JList");
        classobjB9.setBorderPainted(false);
        classobjB9.setContentAreaFilled(false);
        classobjB9.setFocusPainted(false);
        classobjB9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB9ActionPerformed(evt);
            }
        });

        classobjB3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB3.setForeground(new java.awt.Color(0, 0, 153));
        classobjB3.setText("JTextField");
        classobjB3.setBorderPainted(false);
        classobjB3.setContentAreaFilled(false);
        classobjB3.setFocusPainted(false);
        classobjB3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB3ActionPerformed(evt);
            }
        });

        PointerB.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        PointerB.setForeground(new java.awt.Color(0, 0, 153));
        PointerB.setText("JPanel");
        PointerB.setBorderPainted(false);
        PointerB.setContentAreaFilled(false);
        PointerB.setFocusPainted(false);
        PointerB.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        PointerB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PointerBActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton6.setForeground(new java.awt.Color(0, 0, 153));
        jButton6.setText("JDialog");
        jButton6.setBorderPainted(false);
        jButton6.setContentAreaFilled(false);
        jButton6.setFocusPainted(false);
        jButton6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        classobjB8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB8.setForeground(new java.awt.Color(0, 0, 153));
        classobjB8.setText("JButton");
        classobjB8.setBorderPainted(false);
        classobjB8.setContentAreaFilled(false);
        classobjB8.setFocusPainted(false);
        classobjB8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB8ActionPerformed(evt);
            }
        });

        classobjB7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        classobjB7.setForeground(new java.awt.Color(0, 0, 153));
        classobjB7.setText("JOptionPane");
        classobjB7.setBorderPainted(false);
        classobjB7.setContentAreaFilled(false);
        classobjB7.setFocusPainted(false);
        classobjB7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        classobjB7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classobjB7ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(0, 0, 153));
        jButton4.setText("JFrame");
        jButton4.setBorderPainted(false);
        jButton4.setContentAreaFilled(false);
        jButton4.setFocusPainted(false);
        jButton4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout swingpanelLayout = new javax.swing.GroupLayout(swingpanel);
        swingpanel.setLayout(swingpanelLayout);
        swingpanelLayout.setHorizontalGroup(
            swingpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, swingpanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(swingpanelLayout.createSequentialGroup()
                .addGroup(swingpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(swingpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(classobjB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nesterdB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                        .addComponent(PointerB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(classobjB2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classobjB3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classobjB1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classobjB5, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classobjB6, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classobjB9, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classobjB4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classobjB8, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classobjB7, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        swingpanelLayout.setVerticalGroup(
            swingpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(swingpanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jButton4)
                .addGap(1, 1, 1)
                .addComponent(jButton6)
                .addGap(1, 1, 1)
                .addComponent(PointerB)
                .addGap(1, 1, 1)
                .addComponent(nesterdB, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(classobjB, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(classobjB2)
                .addGap(1, 1, 1)
                .addComponent(classobjB3)
                .addGap(1, 1, 1)
                .addComponent(classobjB1)
                .addGap(1, 1, 1)
                .addComponent(classobjB5)
                .addGap(1, 1, 1)
                .addComponent(classobjB6)
                .addGap(1, 1, 1)
                .addComponent(classobjB9)
                .addGap(1, 1, 1)
                .addComponent(classobjB4)
                .addGap(1, 1, 1)
                .addComponent(classobjB8)
                .addGap(0, 0, 0)
                .addComponent(classobjB7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout guipanelLayout = new javax.swing.GroupLayout(guipanel);
        guipanel.setLayout(guipanelLayout);
        guipanelLayout.setHorizontalGroup(
            guipanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guipanelLayout.createSequentialGroup()
                .addGroup(guipanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(swingpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eventspanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(layoutspanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(switchB)
                    .addComponent(switchB1)
                    .addComponent(switchB3))
                .addGap(0, 21, Short.MAX_VALUE))
        );
        guipanelLayout.setVerticalGroup(
            guipanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guipanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(switchB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(swingpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(switchB1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(layoutspanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(switchB3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventspanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jPanel6.setBackground(new java.awt.Color(0, 0, 153));
        jPanel6.setPreferredSize(new java.awt.Dimension(252, 2));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 252, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(basicspanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(arraystringpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(oopspanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IntroB)
                    .addComponent(jButton2)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9)
                    .addComponent(guipanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bestofjavapanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jdbcpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7)
                    .addComponent(jButton8)
                    .addComponent(jButton10)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(IntroB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(basicspanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(arraystringpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(oopspanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guipanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bestofjavapanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jdbcpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jScrollPane3.setViewportView(jPanel5);

        text.setEditable(false);
        text.setColumns(20);
        text.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        text.setLineWrap(true);
        text.setRows(5);
        text.setText("                                             ***Welcome to Learning of Java***");
        text.setWrapStyleWord(true);
        text.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        jScrollPane4.setViewportView(text);

        switchB2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        switchB2.setForeground(new java.awt.Color(255, 0, 51));
        switchB2.setText("Layouts");
        switchB2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchB2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(2480, 2480, 2480)
                    .addComponent(switchB2)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(1019, 1019, 1019)
                    .addComponent(switchB2)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1064, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 837, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //////////////////////////////////
    //JAVA OUTPUT
    ////////////////////////
    private void ifbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ifbuttonActionPerformed
ifbutton.setContentAreaFilled(true);
    ifelseB.setContentAreaFilled(false);
    elseifB.setContentAreaFilled(false);

        text.setText("Java Output\n" +
"You can simply use System.out.println(), System.out.print() or System.out.printf() to send output to standard output (console screen).\n" +
"\n" +
"System is a class and out is a public static field which accepts output data. Don't worry if you don't understand it. Classes, public, and static will be discussed in later chapters.\n" +
"\n" +
"Let's take an example to output a line.\n" +
"\n" +
"class AssignmentOperator {\n" +
"    public static void main(String[] args) {\n" +
"    	\n" +
"    	System.out.println(\"Java programming is interesting.\");   \n" +
"    }\n" +
"}\n" +
"When you run the program, the output will be:\n" +
"\n" +
"Java programming is interesting.\n" +
"Here, println is a method that displays the string inside quotes.\n" +
"\n" +
"What's the difference between println(), print() and printf()?\n" +
"print() - prints string inside the quotes.\n" +
"println() - prints string inside the quotes similar like print() method. Then the cursor moves to the beginning of the next line.\n" +
"printf() - it provides string formatting (similar to printf in C/C++ programming).\n" +
"Example 2: print() and println()\n" +
"class OutputDemo {\n" +
"    public static void main(String[] args) {\n" +
"    	\n" +
"    	System.out.println(\"1. println \");\n" +
"    	System.out.println(\"2. println \");\n" +
"    	\n" +
"    	System.out.print(\"1. print \");\n" +
"    	System.out.print(\"2. print\");\n" +
"    }\n" +
"}\n" +
"When you run the program, the output will be:\n" +
"\n" +
"1. println \n" +
"2. println \n" +
"1. print 2. print\n" +
"Visit this page to learn about Java printf().\n" +
"\n" +
"To display integers, variables and so on, do not use quotation marks.\n" +
"\n" +
"Example 3: Printing Variables and Literals\n" +
"class VariablesDemo {\n" +
"    public static void main(String[] args) {\n" +
"    	\n" +
"    	Double number = -10.6;\n" +
"    	\n" +
"    	System.out.println(5);\n" +
"    	System.out.println(number);\n" +
"    }\n" +
"}\n" +
"When you run the program, the output will be:\n" +
"\n" +
"5\n" +
"-10.6\n" +
"You can use + operator to concatenate strings and print it.\n" +
"\n" +
"Example 4: Print Concatenated Strings\n" +
"class PrintVariables {\n" +
"    public static void main(String[] args) {\n" +
"    	\n" +
"    	Double number = -10.6;\n" +
"    	\n" +
"    	System.out.println(\"I am \" + \"awesome.\");\n" +
"    	System.out.println(\"Number = \" + number);\n" +
"    }\n" +
"}\n" +
"When you run the program, the output will be:\n" +
"\n" +
"I am awesome.\n" +
"Number = -10.6\n" +
"Consider: System.out.println(\"I am \" + \"awesome.\");\n" +
"\n" +
"\n" +
"Strings \"I am \" and \"awesome.\" is concatenated first before it's printed on the screen.\n" +
"\n" +
"Consider: System.out.println(\"Number = \" + number);\n" +
"\n" +
"The value of variable number is evaluated first. It's value is in double which is converted to string by the compiler. Then, the strings are concatenated and printed on the screen.");
       
       ///////////////////////////////shows selected button
      
       
       ///////////////////////////brings caret to start
       text.setCaretPosition(0);
      
    }//GEN-LAST:event_ifbuttonActionPerformed

    //////////////////////////////////
    //JAVA INPUT
    ////////////////////////
    private void ifelseBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ifelseBActionPerformed
ifbutton.setContentAreaFilled(false);
    ifelseB.setContentAreaFilled(true);
    elseifB.setContentAreaFilled(false);
        
        text.setText("Java Input\n" +
"There are several ways to get input from the user in Java. You will learn to get input by using Scanner object in this article.\n" +
"\n" +
"For that, you need to import Scanner class using:\n" +
"\n" +
"import java.util.Scanner;\n" +
"Learn more about Java import\n" +
"\n" +
"Then, we will create an object of Scanner class which will be used to get input from the user.\n" +
"\n" +
"Scanner input = new Scanner(System.in);\n" +
"int number = input.nextInt();\n" +
"Example 5: Get Integer Input From the User\n" +
"import java.util.Scanner;\n" +
"class InputDemo {\n" +
"    public static void main(String[] args) {\n" +
"    	\n" +
"    	Scanner input = new Scanner(System.in);\n" +
"    	\n" +
"    	System.out.print(\"Enter an integer: \");\n" +
"    	int number = input.nextInt();\n" +
"    	System.out.println(\"You entered \" + number);\n" +
"    }\n" +
"}\n" +
"When you run the program, the output will be:\n" +
"\n" +
"Enter an integer: 23\n" +
"You entered 23\n" +
"Here, input object of Scanner class is created. Then, the nextInt() method of the Scanner class is used to get integer input from the user.\n" +
"\n" +
"To get long, float, double and String input from the user, you can use nextLong(), nextFloat(), nextDouble() and next() methods respectively.\n" +
"\n" +
"Example 6: Get float, double and String Input\n" +
"import java.util.Scanner;\n" +
"class InputDemmo {\n" +
"    public static void main(String[] args) {\n" +
"    	\n" +
"    	Scanner input = new Scanner(System.in);\n" +
"    	\n" +
"    	// Getting float input\n" +
"    	System.out.print(\"Enter float: \");\n" +
"    	float myFloat = input.nextFloat();\n" +
"    	System.out.println(\"Float entered = \" + myFloat);\n" +
"    	\n" +
"    	// Getting double input\n" +
"    	System.out.print(\"Enter double: \");\n" +
"    	double myDouble = input.nextDouble();\n" +
"    	System.out.println(\"Double entered = \" + myDouble);\n" +
"    	\n" +
"    	// Getting String input\n" +
"    	System.out.print(\"Enter text: \");\n" +
"    	String myString = input.next();\n" +
"    	System.out.println(\"Text entered = \" + myString);\n" +
"    }\n" +
"}\n" +
"When you run the program, the output will be:\n" +
"\n" +
"Enter float: 2.343\n" +
"Float entered = 2.343\n" +
"Enter double: -23.4\n" +
"Double entered = -23.4\n" +
"Enter text: Hey!\n" +
"Text entered = Hey!");
    
    
    ///////////////////////////////shows selected button
       
    text.setCaretPosition(0);
    
    }//GEN-LAST:event_ifelseBActionPerformed

    private void IntroBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IntroBActionPerformed
        text.setText("Java is a general-purpose programming language that is class-based, object-oriented (although not a pure object-oriented language, as it contains primitive types, and designed to have as few implementation dependencies as possible. It is intended to let application developers write once, run anywhere (WORA),meaning that compiled Java code can run on all platforms that support Java without the need for recompilation");
     text.append("Main uses of Java\n" +
"It is easy for developers to write programs which employ popular software design patterns and best practices using the various components found in Java EE.\nIn terms of mobile development, Java is commonly used as the programming language for Android applications.\n In java programs making a class is necessary");
 
     text.setCaretPosition(0);
 
     IntroB.setContentAreaFilled(true);      
    basicspanel.setVisible(false);
    arraystringpanel.setVisible(false);
    oopspanel.setVisible(false);
    guipanel.setVisible(false);
    bestofjavapanel.setVisible(false);
    jdbcpanel.setVisible(false);
     
    }//GEN-LAST:event_IntroBActionPerformed

    private void elseifBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elseifBActionPerformed
ifbutton.setContentAreaFilled(false);
    ifelseB.setContentAreaFilled(false);
    elseifB.setContentAreaFilled(true);
        text.setText("If \nIf Else\nElse-if\nNested If\nSwitch\n all are same as in c/c++.\n\nYou can refer to our Learning Course of c++ for more information");        
        ///////////////////////////////shows selected button
      
        
        text.setCaretPosition(0);
        
    }//GEN-LAST:event_elseifBActionPerformed

    private void switchBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchBActionPerformed
        text.setText("Swing components consists of:\nJFrame\nJDialog\nJPanel\nJTabbedPane\nJMenuBar\nJMenu\nJMenuItem\nJLabel\nJTextField\nJTextArea\nJCheckBox\nJRadioButton\nJList\nJComboBox\nJButton\nJOptionPane");

//jButton3.setContentAreaFilled(false);
swingpanel.setVisible(true);
layoutspanel.setVisible(false);
eventspanel.setVisible(false);
       
nesterdB.setContentAreaFilled(false);
jButton4.setContentAreaFilled(false);
jButton6.setContentAreaFilled(false);
PointerB.setContentAreaFilled(false);
classobjB.setContentAreaFilled(false);
classobjB1.setContentAreaFilled(false);
classobjB2.setContentAreaFilled(false);
classobjB3.setContentAreaFilled(false);
classobjB4.setContentAreaFilled(false);
classobjB5.setContentAreaFilled(false);
classobjB6.setContentAreaFilled(false);
classobjB7.setContentAreaFilled(false);
classobjB8.setContentAreaFilled(false);
classobjB9.setContentAreaFilled(false);

        text.setCaretPosition(0);
       
    }//GEN-LAST:event_switchBActionPerformed

    private void arrarBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arrarBActionPerformed
arrarB.setContentAreaFilled(true);
    stringB.setContentAreaFilled(false);
    stringmaniB.setContentAreaFilled(false);

        text.setText("An array is a group of like-typed variables that are referred to by a common name.");
text.append("Following are some important point about Java arrays.\n" +
"\n" +
"In Java all arrays are dynamically allocated.(discussed below)\n" +
"Since arrays are objects in Java, we can find their length using member length. This is different from C/C++ where we find length using sizeof.\n" +
"A Java array variable can also be declared like other variables with [] after the data type.\n" +
"The variables in the array are ordered and each have an index beginning from 0.\n" +
"Java array can be also be used as a static field, a local variable or a method parameter.\n" +
"The size of an array must be specified by an int value and not long or short.\n" +
"The direct superclass of an array type is Object.\n" +
"Every array type implements the interfaces Cloneable and java.io.Serializable.\n" +
"Array can contains primitives data types as well as objects of a class depending on the definition of array. In case of primitives data types, the actual values are stored in contiguous memory locations. In case of objects of a class, the actual objects are stored in heap segment.\n" +
"\n" +
"Arrays\n" +
"\n" +
"Creating, Initializing, and Accessing an Array\n" +
"\n" +
"One-Dimensional Arrays :\n" +
"The general form of a one-dimensional array declaration is\n" +
"\n" +
"\n" +
"\n" +
" \n" +
"\n" +
"type var-name[];\n" +
"OR\n" +
"type[] var-name;\n" +
"An array declaration has two components: the type and the name. type declares the element type of the array. The element type determines the data type of each element that comprises the array. Like array of int type, we can also create an array of other primitive data types like char, float, double..etc or user defined data type(objects of a class).Thus, the element type for the array determines what type of data the array will hold.\n" +
"Example:\n" +
"\n" +
"// both are valid declarations\n" +
"int intArray[]; \n" +
"or int[] intArray; \n" +
"\n" +
"byte byteArray[];\n" +
"short shortsArray[];\n" +
"boolean booleanArray[];\n" +
"long longArray[];\n" +
"float floatArray[];\n" +
"double doubleArray[];\n" +
"char charArray[];\n" +
"\n" +
"// an array of references to objects of\n" +
"// the class MyClass (a class created by\n" +
"// user)\n" +
"MyClass myClassArray[]; \n" +
"\n" +
"Object[]  ao,        // array of Object\n" +
"Although the above first declaration establishes the fact that intArray is an array variable, no array actually exists. It simply tells to the compiler that this(intArray) variable will hold an array of the integer type. To link intArray with an actual, physical array of integers, you must allocate one using new and assign it to intArray.\n" +
"\n" +
"Instantiating an Array in Java\n" +
"\n" +
"When an array is declared, only a reference of array is created. To actually create or give memory to array, you create an array like this:The general form of new as it applies to one-dimensional arrays appears as follows:\n" +
"\n" +
"var-name = new type [size];\n" +
"Here, type specifies the type of data being allocated, size specifies the number of elements in the array, and var-name is the name of array variable that is linked to the array. That is, to use new to allocate an array, you must specify the type and number of elements to allocate.\n" +
"\n" +
"Example:\n" +
"\n" +
"int intArray[];    //declaring array\n" +
"intArray = new int[20];  // allocating memory to array\n" +
"OR\n" +
"\n" +
"int[] intArray = new int[20]; // combining both statements in one\n" +
"Note :\n" +
"\n" +
"The elements in the array allocated by new will automatically be initialized to zero (for numeric types), false (for boolean), or null (for reference types).Refer Default array values in Java\n" +
"Obtaining an array is a two-step process. First, you must declare a variable of the desired array type. Second, you must allocate the memory that will hold the array, using new, and assign it to the array variable. Thus, in Java all arrays are dynamically allocated.\n" +
"Array Literal\n" +
"\n" +
"In a situation, where the size of the array and variables of array are already known, array literals can be used.\n" +
"\n" +
" int[] intArray = new int[]{ 1,2,3,4,5,6,7,8,9,10 }; \n" +
" // Declaring array literal\n" +
"The length of this array determines the length of the created array.\n" +
"There is no need to write the new int[] part in the latest versions of Java\n" +
"Accessing Java Array Elements using for Loop\n" +
"\n" +
"Each element in the array is accessed via its index. The index begins with 0 and ends at (total array size)-1. All the elements of array can be accessed using Java for Loop.\n" +
"\n" +
" \n" +
"// accessing the elements of the specified array\n" +
"for (int i = 0; i < arr.length; i++)\n" +
"  System.out.println(\"Element at index \" + i + \n" +
"                                \" : \"+ arr[i]);\n" +
"Implementation:\n"  +
"// Java program to illustrate creating an array \n" +
"// of integers,  puts some values in the array, \n" +
"// and prints each value to standard output. \n" +
"  \n" +
"class GFG  \n" +
"{ \n" +
"    public static void main (String[] args)  \n" +
"    {          \n" +
"      // declares an Array of integers. \n" +
"      int[] arr; \n" +
"          \n" +
"      // allocating memory for 5 integers. \n" +
"      arr = new int[5]; \n" +
"          \n" +
"      // initialize the first elements of the array \n" +
"      arr[0] = 10; \n" +
"          \n" +
"      // initialize the second elements of the array \n" +
"      arr[1] = 20; \n" +
"          \n" +
"      //so on... \n" +
"      arr[2] = 30; \n" +
"      arr[3] = 40; \n" +
"      arr[4] = 50; \n" +
"          \n" +
"      // accessing the elements of the specified array \n" +
"      for (int i = 0; i < arr.length; i++) \n" +
"         System.out.println(\"Element at index \" + i +  \n" +
"                                      \" : \"+ arr[i]);           \n" +
"    } \n" +
"} \n" +
"Output:\n" +
"\n" +
"Element at index 0 : 10\n" +
"Element at index 1 : 20\n" +
"Element at index 2 : 30\n" +
"Element at index 3 : 40\n" +
"Element at index 4 : 50\n" +
"You can also access java arrays using foreach loops");



text.setCaretPosition(0);

    }//GEN-LAST:event_arrarBActionPerformed

    private void stringBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stringBActionPerformed
arrarB.setContentAreaFilled(false);
        System.out.println("hfshfhfhq");
    stringB.setContentAreaFilled(true);
        System.out.println("bjhwggqgwjqg");
    stringmaniB.setContentAreaFilled(false);
        
        text.setText("What is String in java\n" +
"Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object.\n" +
"\n" +
"How to create a string object?\n" +
"There are two ways to create String object:\n" +
"\n" +
"By string literal\n" +
"By new keyword\n" +
"1) String Literal\n" +
"Java String literal is created by using double quotes. For Example:\n" +
"\n" +
"String s=\"welcome\";  \n" +
"Each time you create a string literal, the JVM checks the \"string constant pool\" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example:\n" +
"\n" +
"String s1=\"Welcome\";  \n" +
"String s2=\"Welcome\";//It doesn't create a new instance  \n" +
"Java string literal\n" +
"In the above example, only one object will be created. Firstly, JVM will not find any string object with the value \"Welcome\" in string constant pool, that is why it will create a new object. After that it will find the string with the value \"Welcome\" in the pool, it will not create a new object but will return the reference to the same instance.\n" +
"\n" +
"Note: String objects are stored in a special memory area known as the \"string constant pool\".\n" +
"Why Java uses the concept of String literal?\n" +
"To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool).\n" +
"\n" +
"2) By new keyword\n" +
"String s=new String(\"Welcome\");//creates two objects and one reference variable  \n" +
"In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal \"Welcome\" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool).\n" +
"\n" +
"Java String Example\n" +
"public class StringExample{  \n" +
"public static void main(String args[]){  \n" +
"String s1=\"java\";//creating string by java string literal  \n" +
"char ch[]={'s','t','r','i','n','g','s'};  \n" +
"String s2=new String(ch);//converting char array to string  \n" +
"String s3=new String(\"example\");//creating java string by new keyword  \n" +
"System.out.println(s1);  \n" +
"System.out.println(s2);  \n" +
"System.out.println(s3);  \n" +
"}}  \n" +
"Output\n" +
"java\n" +
"strings\n" +
"example");
       
       
       
       text.setCaretPosition(0);
      
    }//GEN-LAST:event_stringBActionPerformed

    private void stringmaniBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stringmaniBActionPerformed
arrarB.setContentAreaFilled(false);
    stringB.setContentAreaFilled(false);
    stringmaniB.setContentAreaFilled(true);

        text.setText("Java String class methods\n" +
"The java.lang.String class provides many useful methods to perform operations on sequence of char values.\n" +
"\n" +

"1	char charAt(int index)\n	returns char value for the particular index\n" +
"2	int length()\n	returns string length\n" +
"3	static String format(String format, Object... args)\n	returns a formatted string.\n" +
"4	static String format(Locale l, String format, Object... args)\n	returns formatted string with given locale.\n" +
"5	String substring(int beginIndex)\n	returns substring for given begin index.\n" +
"6	String substring(int beginIndex, int endIndex)\n	returns substring for given begin index and end index.\n" +
"7	boolean contains(CharSequence s)\n	returns true or false after matching the sequence of char value.\n" +
"8	static String join(CharSequence delimiter, CharSequence... elements)\n	returns a joined string.\n" +
"9	static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements)\n	returns a joined string.\n" +
"10	boolean equals(Object another)\n	checks the equality of string with the given object.\n" +
"11	boolean isEmpty()\n	checks if string is empty.\n" +
"12	String concat(String str)\n	concatenates the specified string.\n" +
"13	String replace(char old, char new)\n	replaces all occurrences of the specified char value.\n" +
"14	String replace(CharSequence old, CharSequence new)\n	replaces all occurrences of the specified CharSequence.\n" +
"15	static String equalsIgnoreCase(String another)\n	compares another string. It doesn't check case.\n" +
"16	String[] split(String regex)\n	returns a split string matching regex.\n" +
"17	String[] split(String regex, int limit)\n	returns a split string matching regex and limit.\n" +
"18	String intern()\n	returns an interned string.\n" +
"19	int indexOf(int ch)\n	returns the specified char value index.\n" +
"20	int indexOf(int ch, int fromIndex)\n	returns the specified char value index starting with given index.\n" +
"21	int indexOf(String substring)\n	returns the specified substring index.\n" +
"22	int indexOf(String substring, int fromIndex)\n	returns the specified substring index starting with given index.\n" +
"23	String toLowerCase()\n	returns a string in lowercase.\n" +
"24	String toLowerCase(Locale l)\n	returns a string in lowercase using specified locale.\n" +
"25	String toUpperCase()\n	returns a string in uppercase.\n" +
"26	String toUpperCase(Locale l)\n	returns a string in uppercase using specified locale.\n" +
"27	String trim()\n	removes beginning and ending spaces of this string.\n" +
"28	static String valueOf(int value)\n	converts given type into string. It is an overloaded method.");
        
      
        
        text.setCaretPosition(0);
       
    }//GEN-LAST:event_stringmaniBActionPerformed

    private void nesterdBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nesterdBActionPerformed
nesterdB.setContentAreaFilled(true);
jButton4.setContentAreaFilled(false);
jButton6.setContentAreaFilled(false);
PointerB.setContentAreaFilled(false);
classobjB.setContentAreaFilled(false);
classobjB1.setContentAreaFilled(false);
classobjB2.setContentAreaFilled(false);
classobjB3.setContentAreaFilled(false);
classobjB4.setContentAreaFilled(false);
classobjB5.setContentAreaFilled(false);
classobjB6.setContentAreaFilled(false);
classobjB7.setContentAreaFilled(false);
classobjB8.setContentAreaFilled(false);
classobjB9.setContentAreaFilled(false);

        text.setText("Java JTabbedPane\n" +
"The JTabbedPane class is used to switch between a group of components by clicking on a tab with a given title or icon. It inherits JComponent class.\n"+"\n" +
"JTabbedPane class declaration\n\n" +
"Let's see the declaration for javax.swing.JTabbedPane class.\n" +
"\n" +
"public class JTabbedPane extends JComponent implements Serializable, Accessible, SwingConstants  \n" +
"Commonly used Constructors:\n" +
"Constructor	Description\n" +
"JTabbedPane()	Creates an empty TabbedPane with a default tab placement of JTabbedPane.Top.\n" +
"JTabbedPane(int tabPlacement)	Creates an empty TabbedPane with a specified tab placement.\n" +
"JTabbedPane(int tabPlacement, int tabLayoutPolicy)	Creates an empty TabbedPane with a specified tab placement and tab layout policy.");        
       
        
        text.setCaretPosition(0);
   
    }//GEN-LAST:event_nesterdBActionPerformed

    private void PointerBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PointerBActionPerformed
nesterdB.setContentAreaFilled(false);
jButton4.setContentAreaFilled(false);
jButton6.setContentAreaFilled(false);
PointerB.setContentAreaFilled(true);
classobjB.setContentAreaFilled(false);
classobjB1.setContentAreaFilled(false);
classobjB2.setContentAreaFilled(false);
classobjB3.setContentAreaFilled(false);
classobjB4.setContentAreaFilled(false);
classobjB5.setContentAreaFilled(false);
classobjB6.setContentAreaFilled(false);
classobjB7.setContentAreaFilled(false);
classobjB8.setContentAreaFilled(false);
classobjB9.setContentAreaFilled(false);
        
        text.setText("The JPanel is a simplest container class. It provides space in which an application can attach any other component. It inherits the JComponents class.\nConstructor and Description\n" +
"JPanel()\n" +
"Creates a new JPanel with a double buffer and a flow layout.\n" +
"JPanel(boolean isDoubleBuffered)\n" +
"Creates a new JPanel with FlowLayout and the specified buffering strategy.\n" +
"JPanel(LayoutManager layout)\n" +
"Create a new buffered JPanel with the specified layout manager\n" +
"JPanel(LayoutManager layout, boolean isDoubleBuffered)\n" +
"Creates a new JPanel with the specified layout manager and buffering strategy.\n\n");        


text.setCaretPosition(0);

    }//GEN-LAST:event_PointerBActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
nesterdB.setContentAreaFilled(false);
jButton4.setContentAreaFilled(true);
jButton6.setContentAreaFilled(false);
PointerB.setContentAreaFilled(false);
classobjB.setContentAreaFilled(false);
classobjB1.setContentAreaFilled(false);
classobjB2.setContentAreaFilled(false);
classobjB3.setContentAreaFilled(false);
classobjB4.setContentAreaFilled(false);
classobjB5.setContentAreaFilled(false);
classobjB6.setContentAreaFilled(false);
classobjB7.setContentAreaFilled(false);
classobjB8.setContentAreaFilled(false);
classobjB9.setContentAreaFilled(false);
        
        text.setText("Frame:\nA frame, implemented as an instance of the JFrame class, is a window that has decorations such as a border, a title, and supports button components that close or iconify the window. Applications with a GUI usually include at least one frame.\nConstructor and Description:-\n\nJFrame()\n" +
"Constructs a new frame that is initially invisible.\n\n" +
"JFrame(GraphicsConfiguration gc)\n" +
"Creates a Frame in the specified GraphicsConfiguration of a screen device and a blank title.\n\n" +
"JFrame(String title)\n" +
"Creates a new, initially invisible Frame with the specified title.\n\n" +
"JFrame(String title, GraphicsConfiguration gc)\n" +
"Creates a JFrame with the specified title and the specified GraphicsConfiguration of a screen device.\n\n");
             
         text.setCaretPosition(0);
 
    }//GEN-LAST:event_jButton4ActionPerformed

    private void classobjBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjBActionPerformed
nesterdB.setContentAreaFilled(false);
jButton4.setContentAreaFilled(false);
jButton6.setContentAreaFilled(false);
PointerB.setContentAreaFilled(false);
classobjB.setContentAreaFilled(true);
classobjB1.setContentAreaFilled(false);
classobjB2.setContentAreaFilled(false);
classobjB3.setContentAreaFilled(false);
classobjB4.setContentAreaFilled(false);
classobjB5.setContentAreaFilled(false);
classobjB6.setContentAreaFilled(false);
classobjB7.setContentAreaFilled(false);
classobjB8.setContentAreaFilled(false);
classobjB9.setContentAreaFilled(false);
        
        text.setText("Java JMenuBar, JMenu and JMenuItem\n" +
"The JMenuBar class is used to display menubar on the window or frame. It may have several menus.\n" +
"\n" +
"The object of JMenu class is a pull down menu component which is displayed from the menu bar. It inherits the JMenuItem class.\n" +
"\n" +
"The object of JMenuItem class adds a simple labeled menu item. The items used in a menu must belong to the JMenuItem or any of its subclass.\n" +
"\n" +
"\n" +
"JMenuBar class declaration\n" +
"public class JMenuBar extends JComponent implements MenuElement, Accessible  \n" +
"JMenu class declaration\n" +
"public class JMenu extends JMenuItem implements MenuElement, Accessible  \n" +
"JMenuItem class declaration\n" +
"public class JMenuItem extends AbstractButton implements Accessible, MenuElement  \nConstructor and Description of JMenuBar\n" +
"JMenuBar()\n" +
"Creates a new menu bar.\n\nConstructor and Description of JMenu\n" +
"JMenu()\n" +
"Constructs a new JMenu with no text.\n" +
"JMenu(Action a)\n" +
"Constructs a menu whose properties are taken from the Action supplied.\n" +
"JMenu(String s)\n" +
"Constructs a new JMenu with the supplied string as its text.\n" +
"JMenu(String s, boolean b)\n" +
"Constructs a new JMenu with the supplied string as its text and specified as a tear-off menu or not.\n\nConstructor and Description of JMenuItem\n" +
"JMenuItem()\n" +
"Creates a JMenuItem with no set text or icon.\n" +
"JMenuItem(Action a)\n" +
"Creates a menu item whose properties are taken from the specified Action.\n" +
"JMenuItem(Icon icon)\n" +
"Creates a JMenuItem with the specified icon.\n" +
"JMenuItem(String text)\n" +
"Creates a JMenuItem with the specified text.\n" +
"JMenuItem(String text, Icon icon)\n" +
"Creates a JMenuItem with the specified text and icon.\n" +
"JMenuItem(String text, int mnemonic)\n" +
"Creates a JMenuItem with the specified text and keyboard mnemonic.\n\nJLabel\nJLabel is used to display a short string or an image icon. JLabel can display text, image or both . JLabel is only a display of text or image and it cannot get focus .\n");
        
      
        
        text.setCaretPosition(0);
     
    }//GEN-LAST:event_classobjBActionPerformed

    private void inheritancBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inheritancBActionPerformed
inheritancB.setContentAreaFilled(true);
    jButton5.setContentAreaFilled(false);
        
        text.setText("Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object. It is an important part of OOPs (Object Oriented programming system).\n" +
"\n" +
"The idea behind inheritance in Java is that you can create new classes that are built upon existing classes. When you inherit from an existing class, you can reuse methods and fields of the parent class. Moreover, you can add new methods and fields in your current class also.\n" +
"\n" +
"Inheritance represents the IS-A relationship which is also known as a parent-child relationship.\n"+
        "Types of inheritance in java\n" +
"On the basis of class, there can be three types of inheritance in java: single, multilevel and hierarchical.\n" +
"\n" +
"In java programming, multiple and hybrid inheritance is supported through interface only. We will learn about interfaces later."+
"Inheriting a Class\n"+"class Subclass-name extends Superclass-name  \n" +
"{  \n" +
"   //methods and fields  \n" +
"}  \n" +
"The extends keyword indicates that you are making a new class that derives from an existing class. The meaning of \"extends\" is to increase the functionality.\n" +
"\n" +
"In the terminology of Java, a class which is inherited is called a parent or superclass, and the new class is called child or subclass."+
        "Interfaces in Java\n" +
"Like a class, an interface can have methods and variables, but the methods declared in interface are by default abstract (only method signature, no body).  \n" +
"\n" +
"Interfaces specify what a class must do and not how. It is the blueprint of the class.\n" +
"An Interface is about capabilities like a Player may be an interface and any class implementing Player must be able to (or must implement) move(). So it specifies a set of methods that the class has to implement.\n" +
"If a class implements an interface and does not provide method bodies for all functions specified in the interface, then class must be declared abstract.\n" +
"A Java library example is, Comparator Interface. If a class implements this interface, then it can be used to sort a collection.\n" +
"Syntax :\n" +
"\n" +
"interface <interface_name> {\n" +
"    \n" +
"    // declare constant fields\n" +
"    // declare methods that abstract \n" +
"    // by default.\n" +
"}\n" +
"\n" +
"To declare an interface, use interface keyword. It is used to provide total abstraction. That means all the methods in interface are declared with empty body and are public and all fields are public, static and final by default. A class that implement interface must implement all the methods declared in the interface. To implement interface use implements keyword.\n" +
"\n" +
"Why do we use interface ?\n" +
"\n" +
"It is used to achieve total abstraction.\n" +
"Since java does not support multiple inheritance in case of class, but by using interface it can achieve multiple inheritance .\n" +
"It is also used to achieve loose coupling.\n" +
"Interfaces are used to implement abstraction. So the question arises why use interfaces when we have abstract classes?\n" +
"The reason is, abstract classes may contain non-final variables, whereas variables in interface are final, public and static.\n" +
"\n" +
"// A simple interface \n" +
"interface Player \n" +
"{ \n" +
"    final int id = 10; \n" +
"    int move(); \n" +
"} \n" +
"To implement an interface we use keyword: implement\n" +
"\n" +
"// Java program to demonstrate working of  \n" +
"// interface. \n" +
"import java.io.*; \n" +
"  \n" +
"// A simple interface \n" +
"interface in1 \n" +
"{ \n" +
"    // public, static and final \n" +
"    final int a = 10; \n" +
"  \n" +
"    // public and abstract  \n" +
"    void display(); \n" +
"} \n" +
"  \n" +
"// A class that implements interface. \n" +
"class testClass implements in1 \n" +
"{ \n" +
"    // Implementing the capabilities of \n" +
"    // interface. \n" +
"    public void display() \n" +
"    { \n" +
"        System.out.println(\"KnowledgeHub\"); \n" +
"    } \n" +
"  \n" +
"    // Driver Code \n" +
"    public static void main (String[] args) \n" +
"    { \n" +
"        testClass t = new testClass(); \n" +
"        t.display(); \n" +
"        System.out.println(a); \n" +
"    } \n" +
"} \n" +
"Output:\n" +
"\n" +
"KnowledgeHub\n" +
"10");

        


text.setCaretPosition(0);

    }//GEN-LAST:event_inheritancBActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
text.setText("To know about Basics of Java click on sub-tabs");

        text.setCaretPosition(0);
        
        IntroB.setContentAreaFilled(false);      
    basicspanel.setVisible(true);
    arraystringpanel.setVisible(false);
    oopspanel.setVisible(false);
    guipanel.setVisible(false);
    bestofjavapanel.setVisible(false);
    jdbcpanel.setVisible(false);// TODO add your handling code here:
    
    ifbutton.setContentAreaFilled(false);
    ifelseB.setContentAreaFilled(false);
    elseifB.setContentAreaFilled(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
text.setText("To know about Arrays and Strings in Java click on sub-tabs");

        text.setCaretPosition(0);
        
        IntroB.setContentAreaFilled(false);      
    basicspanel.setVisible(false);
    arraystringpanel.setVisible(true);
    oopspanel.setVisible(false);
    guipanel.setVisible(false);
    bestofjavapanel.setVisible(false);
    jdbcpanel.setVisible(false);// TODO add your handling code here:
    
    arrarB.setContentAreaFilled(false);
    stringB.setContentAreaFilled(false);
    stringmaniB.setContentAreaFilled(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
text.setText("To know about OOPS in Java click on sub-tabs");

        text.setCaretPosition(0);
        
        IntroB.setContentAreaFilled(false);      
    basicspanel.setVisible(false);
    arraystringpanel.setVisible(false);
    oopspanel.setVisible(true);
    guipanel.setVisible(false);
    bestofjavapanel.setVisible(false);
    jdbcpanel.setVisible(false);

    inheritancB.setContentAreaFilled(false);
    jButton5.setContentAreaFilled(false);// TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
inheritancB.setContentAreaFilled(false);
    jButton5.setContentAreaFilled(true);
        
        text.setText("Polymorphism:\n"+"Polymorphism is one of the OOPs feature that allows us to perform a single action in different ways. For example, lets say we have a class Animal that has a method sound(). "+
        "public class Animal{\n" +
"   \n" +
"   public void sound(){\n" +
"      System.out.println(\"Animal is making a sound\");   \n" +
"   }\n" +
"}\n" +
"Now lets say we two subclasses of Animal class: Horse and Cat that extends (see Inheritance) Animal class. We can provide the implementation to the same method like this:\n" +
"\n" +
"public class Horse extends Animal{\n" +
"\n" +
"    @Override\n" +
"    public void sound(){\n" +
"        System.out.println(\"Neigh\");\n" +
"    }\n" +
"}\n" +
"and\n" +
"\n" +
"public class Cat extends Animal{\n" +
"\n" +
"    @Override\n" +
"    public void sound(){\n" +
"        System.out.println(\"Meow\");\n" +
"    }\n" +
"}"+"Types of polymorphism:\n There are two types of polymorphism in java:\n" +
"1) Static Polymorphism also known as compile time polymorphism\n" +
"2) Dynamic Polymorphism also known as runtime polymorphism\n" +
"\n" +
"Compile time Polymorphism (or Static polymorphism)\n" +
"Polymorphism that is resolved during compiler time is known as static polymorphism. Method overloading is an example of compile time polymorphism.\n" +
"Method Overloading: This allows us to have more than one method having the same name, if the parameters of methods are different in number, sequence and data types of parameters. We have already discussed Method overloading here: If you didn’t read that guide, refer: Method Overloading in Java\n" +
"\n" +
"Example of static Polymorphism\n" +
"Method overloading is one of the way java supports static polymorphism. Here we have two definitions of the same method add() which add method would be called is determined by the parameter list at the compile time. That is the reason this is also known as compile time polymorphism.\n" +
"\n" +
"class SimpleCalculator\n" +
"{\n" +
"    int add(int a, int b)\n" +
"    {\n" +
"         return a+b;\n" +
"    }\n" +
"    int  add(int a, int b, int c)  \n" +
"    {\n" +
"         return a+b+c;\n" +
"    }\n" +
"}\n" +
"public class Demo\n" +
"{\n" +
"   public static void main(String args[])\n" +
"   {\n" +
"	   SimpleCalculator obj = new SimpleCalculator();\n" +
"       System.out.println(obj.add(10, 20));\n" +
"       System.out.println(obj.add(10, 20, 30));\n" +
"   }\n" +
"}\n" +
"Output:\n" +
"\n" +
"\n" +
"30\n" +
"60\n" +
"Runtime Polymorphism (or Dynamic polymorphism)\n" +
"It is also known as Dynamic Method Dispatch. Dynamic polymorphism is a process in which a call to an overridden method is resolved at runtime, thats why it is called runtime polymorphism. I have already discussed method overriding in detail in a separate tutorial, refer it: Method Overriding in Java.\n" +
"\n" +
"Example\n" +
"In this example we have two classes ABC and XYZ. ABC is a parent class and XYZ is a child class. The child class is overriding the method myMethod() of parent class. In this example we have child class object assigned to the parent class reference so in order to determine which method would be called, the type of the object would be determined at run-time. It is the type of object that determines which version of the method would be called (not the type of reference).\n" +
"\n" +
"To understand the concept of overriding, you should have the basic knowledge of inheritance in Java.\n" +
"\n" +
"class ABC{\n" +
"   public void myMethod(){\n" +
"	System.out.println(\"Overridden Method\");\n" +
"   }\n" +
"}\n" +
"public class XYZ extends ABC{\n" +
"\n" +
"   public void myMethod(){\n" +
"	System.out.println(\"Overriding Method\");\n" +
"   }\n" +
"   public static void main(String args[]){\n" +
"	ABC obj = new XYZ();\n" +
"	obj.myMethod();\n" +
"   }\n" +
"}\n" +
"Output:\n" +
"\n" +
"Overriding Method\n" +
"When an overridden method is called through a reference of parent class, then type of the object determines which method is to be executed. Thus, this determination is made at run time.\n" +
"Since both the classes, child class and parent class have the same method animalSound. Which version of the method(child class or parent class) will be called is determined at runtime by JVM.");        // TODO add your handling code here:



text.setCaretPosition(0);

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
text.setText("To know about Graphical User Interface(GUI) of Java click on sub-tabs");

        text.setCaretPosition(0);
        
        //jButton3.setContentAreaFilled(false);
 swingpanel.setVisible(false);
layoutspanel.setVisible(false);
eventspanel.setVisible(false);
        
        IntroB.setContentAreaFilled(false);      
    basicspanel.setVisible(false);
    arraystringpanel.setVisible(false);
    oopspanel.setVisible(false);
    guipanel.setVisible(true);
    bestofjavapanel.setVisible(false);
    jdbcpanel.setVisible(false);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
nesterdB.setContentAreaFilled(false);
jButton4.setContentAreaFilled(false);
jButton6.setContentAreaFilled(true);
PointerB.setContentAreaFilled(false);
classobjB.setContentAreaFilled(false);
classobjB1.setContentAreaFilled(false);
classobjB2.setContentAreaFilled(false);
classobjB3.setContentAreaFilled(false);
classobjB4.setContentAreaFilled(false);
classobjB5.setContentAreaFilled(false);
classobjB6.setContentAreaFilled(false);
classobjB7.setContentAreaFilled(false);
classobjB8.setContentAreaFilled(false);
classobjB9.setContentAreaFilled(false);

        text.setText("JDialog:\n The JDialog control represents a top level window with a border and a title used to take some form of input from the user. It inherits the Dialog class. Unlike JFrame, it doesn't have maximize and minimize buttons.\nConstructor and Description\n\n" +
"JDialog()\n" +
"Creates a modeless dialog without a title and without a specified Frame owner.\n\n" +
"JDialog(Dialog owner)\n" +
"Creates a modeless dialog with the specified Dialog as its owner and an empty title.\n\n" +
"JDialog(Dialog owner, boolean modal)\n" +
"Creates a dialog with an empty title and the specified modality and Dialog as its owner.\n\n" +
"JDialog(Dialog owner, String title)\n" +
"Creates a modeless dialog with the specified title and with the specified owner dialog.\n\n" +
"JDialog(Dialog owner, String title, boolean modal)\n" +
"Creates a dialog with the specified title, modality and the specified owner Dialog.\n\n" +
"JDialog(Dialog owner, String title, boolean modal, GraphicsConfiguration gc)\n" +
"Creates a dialog with the specified title, owner Dialog, modality and GraphicsConfiguration.\n\n" +
"JDialog(Frame owner)\n" +
"Creates a modeless dialog with the specified Frame as its owner and an empty title.\n\n" +
"JDialog(Frame owner, boolean modal)\n" +
"Creates a dialog with an empty title and the specified modality and Frame as its owner.\n\n" +
"JDialog(Frame owner, String title)\n" +
"Creates a modeless dialog with the specified title and with the specified owner frame.\n\n" +
"JDialog(Frame owner, String title, boolean modal)\n" +
"Creates a dialog with the specified title, owner Frame and modality.\n\n" +
"JDialog(Frame owner, String title, boolean modal, GraphicsConfiguration gc)\n" +
"Creates a dialog with the specified title, owner Frame, modality and GraphicsConfiguration.\n\n" +
"JDialog(Window owner)\n" +
"Creates a modeless dialog with the specified Window as its owner and an empty title.\n\n" +
"JDialog(Window owner, Dialog.ModalityType modalityType)\n" +
"Creates a dialog with an empty title and the specified modality and Window as its owner.\n\n" +
"JDialog(Window owner, String title)\n" +
"Creates a modeless dialog with the specified title and owner Window.\n\n" +
"JDialog(Window owner, String title, Dialog.ModalityType modalityType)\n" +
"Creates a dialog with the specified title, owner Window and modality.\n\n" +
"JDialog(Window owner, String title, Dialog.ModalityType modalityType, GraphicsConfiguration gc)\n" +
"Creates a dialog with the specified title, owner Window, modality and GraphicsConfiguration.\n\n");
        
        text.setCaretPosition(0);
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void classobjB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB1ActionPerformed
nesterdB.setContentAreaFilled(false);
jButton4.setContentAreaFilled(false);
jButton6.setContentAreaFilled(false);
PointerB.setContentAreaFilled(false);
classobjB.setContentAreaFilled(false);
classobjB1.setContentAreaFilled(true);
classobjB2.setContentAreaFilled(false);
classobjB3.setContentAreaFilled(false);
classobjB4.setContentAreaFilled(false);
classobjB5.setContentAreaFilled(false);
classobjB6.setContentAreaFilled(false);
classobjB7.setContentAreaFilled(false);
classobjB8.setContentAreaFilled(false);
classobjB9.setContentAreaFilled(false);

        text.setText("A JTextArea is a multi-line area that displays plain text. It is intended to be a lightweight component \nConstructor and Description\n" +
"JTextArea()\n" +
"Constructs a new TextArea.\n" +
"JTextArea(Document doc)\n" +
"Constructs a new JTextArea with the given document model, and defaults for all of the other arguments (null, 0, 0).\n" +
"JTextArea(Document doc, String text, int rows, int columns)\n" +
"Constructs a new JTextArea with the specified number of rows and columns, and the given model.\n" +
"JTextArea(int rows, int columns)\n" +
"Constructs a new empty TextArea with the specified number of rows and columns.\n" +
"JTextArea(String text)\n" +
"Constructs a new TextArea with the specified text displayed.\n" +
"JTextArea(String text, int rows, int columns)\n" +
"Constructs a new TextArea with the specified text and number of rows and columns.");
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB1ActionPerformed

    private void classobjB2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB2ActionPerformed
nesterdB.setContentAreaFilled(false);
jButton4.setContentAreaFilled(false);
jButton6.setContentAreaFilled(false);
PointerB.setContentAreaFilled(false);
classobjB.setContentAreaFilled(false);
classobjB1.setContentAreaFilled(false);
classobjB2.setContentAreaFilled(true);
classobjB3.setContentAreaFilled(false);
classobjB4.setContentAreaFilled(false);
classobjB5.setContentAreaFilled(false);
classobjB6.setContentAreaFilled(false);
classobjB7.setContentAreaFilled(false);
classobjB8.setContentAreaFilled(false);
classobjB9.setContentAreaFilled(false);
        
        text.setText("A JLabel object can display either text, an image, or both. You can specify where in the label's display area the label's contents are aligned by setting the vertical and horizontal alignment. By default, labels are vertically centered in their display area. Text-only labels are leading edge aligned, by default; image-only labels are horizontally centered, by default.");
    text.append("\nConstructor and Description\n" +
"JLabel()\n" +
"Creates a JLabel instance with no image and with an empty string for the title.\n" +
"JLabel(Icon image)\n" +
"Creates a JLabel instance with the specified image.\n" +
"JLabel(Icon image, int horizontalAlignment)\n" +
"Creates a JLabel instance with the specified image and horizontal alignment.\n" +
"JLabel(String text)\n" +
"Creates a JLabel instance with the specified text.\n" +
"JLabel(String text, Icon icon, int horizontalAlignment)\n" +
"Creates a JLabel instance with the specified text, image, and horizontal alignment.\n" +
"JLabel(String text, int horizontalAlignment)\n" +
"Creates a JLabel instance with the specified text and horizontal alignment.");
             text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB2ActionPerformed

    private void classobjB3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB3ActionPerformed
nesterdB.setContentAreaFilled(false);
jButton4.setContentAreaFilled(false);
jButton6.setContentAreaFilled(false);
PointerB.setContentAreaFilled(false);
classobjB.setContentAreaFilled(false);
classobjB1.setContentAreaFilled(false);
classobjB2.setContentAreaFilled(false);
classobjB3.setContentAreaFilled(true);
classobjB4.setContentAreaFilled(false);
classobjB5.setContentAreaFilled(false);
classobjB6.setContentAreaFilled(false);
classobjB7.setContentAreaFilled(false);
classobjB8.setContentAreaFilled(false);
classobjB9.setContentAreaFilled(false);

        text.setText("JTextField is a lightweight component that allows the editing of a single line of text.\nConstructor and Description\n" +
"JTextField()\n" +
"Constructs a new TextField.\n" +
"JTextField(Document doc, String text, int columns)\n" +
"Constructs a new JTextField that uses the given text storage model and the given number of columns.\n" +
"JTextField(int columns)\n" +
"Constructs a new empty TextField with the specified number of columns.\n" +
"JTextField(String text)\n" +
"Constructs a new TextField initialized with the specified text.\n" +
"JTextField(String text, int columns)\n" +
"Constructs a new TextField initialized with the specified text and columns.");
        
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB3ActionPerformed

    private void classobjB4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB4ActionPerformed
nesterdB.setContentAreaFilled(false);
jButton4.setContentAreaFilled(false);
jButton6.setContentAreaFilled(false);
PointerB.setContentAreaFilled(false);
classobjB.setContentAreaFilled(false);
classobjB1.setContentAreaFilled(false);
classobjB2.setContentAreaFilled(false);
classobjB3.setContentAreaFilled(false);
classobjB4.setContentAreaFilled(true);
classobjB5.setContentAreaFilled(false);
classobjB6.setContentAreaFilled(false);
classobjB7.setContentAreaFilled(false);
classobjB8.setContentAreaFilled(false);
classobjB9.setContentAreaFilled(false);

text.setText("A component that combines a button or editable field and a drop-down list. The user can select a value from the drop-down list, which appears at the user's request. If you make the combo box editable, then the combo box includes an editable field into which the user can type a value.\nConstructor and Description\n" +
"JComboBox()\n" +
"Creates a JComboBox with a default data model.\n" +
"JComboBox(ComboBoxModel<E> aModel)\n" +
"Creates a JComboBox that takes its items from an existing ComboBoxModel.\n" +
"JComboBox(E[] items)\n" +
"Creates a JComboBox that contains the elements in the specified array.\n" +
"JComboBox(Vector<E> items)\n" +
"Creates a JComboBox that contains the elements in the specified Vector.");
        
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB4ActionPerformed

    private void classobjB5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB5ActionPerformed
nesterdB.setContentAreaFilled(false);
jButton4.setContentAreaFilled(false);
jButton6.setContentAreaFilled(false);
PointerB.setContentAreaFilled(false);
classobjB.setContentAreaFilled(false);
classobjB1.setContentAreaFilled(false);
classobjB2.setContentAreaFilled(false);
classobjB3.setContentAreaFilled(false);
classobjB4.setContentAreaFilled(false);
classobjB5.setContentAreaFilled(true);
classobjB6.setContentAreaFilled(false);
classobjB7.setContentAreaFilled(false);
classobjB8.setContentAreaFilled(false);
classobjB9.setContentAreaFilled(false);

        text.setText("The JCheckBox class is used to create a checkbox. It is used to turn an option on (true) or off (false). Clicking on a CheckBox changes its state from \"on\" to \"off\" or from \"off\" to \"on \".It inherits JToggleButton class.\nnext →← prev\n" +
"Java JCheckBox\n" +
"The JCheckBox class is used to create a checkbox. It is used to turn an option on (true) or off (false). Clicking on a CheckBox changes its state from \"on\" to \"off\" or from \"off\" to \"on \".It inherits JToggleButton class.\n" +
"\n" +
"JCheckBox class declaration\n" +
"Let's see the declaration for javax.swing.JCheckBox class.\n" +
"\n" +
"public class JCheckBox extends JToggleButton implements Accessible  \n" +
"Commonly used Constructors:\n"  +
"JJCheckBox():\n	Creates an initially unselected check box button with no text, no icon.\n" +
"JChechBox(String s):\n	Creates an initially unselected check box with text.\n" +
"JCheckBox(String text, boolean selected):\n	Creates a check box with text and specifies whether or not it is initially selected.\n" +
"JCheckBox(Action a):\n	Creates a check box where properties are taken from the Action supplied.");
        
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB5ActionPerformed

    private void classobjB6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB6ActionPerformed
nesterdB.setContentAreaFilled(false);
jButton4.setContentAreaFilled(false);
jButton6.setContentAreaFilled(false);
PointerB.setContentAreaFilled(false);
classobjB.setContentAreaFilled(false);
classobjB1.setContentAreaFilled(false);
classobjB2.setContentAreaFilled(false);
classobjB3.setContentAreaFilled(false);
classobjB4.setContentAreaFilled(false);
classobjB5.setContentAreaFilled(false);
classobjB6.setContentAreaFilled(true);
classobjB7.setContentAreaFilled(false);
classobjB8.setContentAreaFilled(false);
classobjB9.setContentAreaFilled(false);

        text.setText("Java JRadioButton\n" +
"The JRadioButton class is used to create a radio button. It is used to choose one option from multiple options. It is widely used in exam systems or quiz.\n" +
"\n" +
"It should be added in ButtonGroup to select one radio button only.\n" +
"\n" +
"JRadioButton class declaration\n" +
"Let's see the declaration for javax.swing.JRadioButton class.\n" +
"\n" +
"\n" +
"public class JRadioButton extends JToggleButton implements Accessible  \n" +
"Commonly used Constructors:\n" +
"JRadioButton():\n	Creates an unselected radio button with no text.\n" +
"JRadioButton(String s):\n	Creates an unselected radio button with specified text.\n" +
"JRadioButton(String s, boolean selected):\n	Creates a radio button with the specified text and selected status.\n" +
"Commonly used Methods:\n" +
"void setText(String s):\n	It is used to set specified text on button.\n" +
"String getText():\n	It is used to return the text of the button.\n" +
"void setEnabled(boolean b):\n	It is used to enable or disable the button.\n" +
"void setIcon(Icon b):\n	It is used to set the specified Icon on the button.\n" +
"Icon getIcon():\n	It is used to get the Icon of the button.\n" +
"void setMnemonic(int a):\n	It is used to set the mnemonic on the button.\n" +
"void addActionListener(ActionListener a):\n	It is used to add the action listener to this object.");
        
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB6ActionPerformed

    private void classobjB7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB7ActionPerformed
nesterdB.setContentAreaFilled(false);
jButton4.setContentAreaFilled(false);
jButton6.setContentAreaFilled(false);
PointerB.setContentAreaFilled(false);
classobjB.setContentAreaFilled(false);
classobjB1.setContentAreaFilled(false);
classobjB2.setContentAreaFilled(false);
classobjB3.setContentAreaFilled(false);
classobjB4.setContentAreaFilled(false);
classobjB5.setContentAreaFilled(false);
classobjB6.setContentAreaFilled(false);
classobjB7.setContentAreaFilled(true);
classobjB8.setContentAreaFilled(false);
classobjB9.setContentAreaFilled(false);

        text.setText("The JOptionPane class is used to provide standard dialog boxes such as message dialog box, confirm dialog box and input dialog box. These dialog boxes are used to display information or get input from the user. The JOptionPane class inherits JComponent class.\n" +
"\n" +
"JOptionPane class declaration\n" +
"public class JOptionPane extends JComponent implements Accessible  \n" +
"Common Constructors of JOptionPane class:\n" +
"JOptionPane():\n	It is used to create a JOptionPane with a test message.\n" +
"JOptionPane(Object message):\n	    It is used to create an instance of JOptionPane to display a message.\n" +
"JOptionPane(Object message, int messageType):\n	It is used to create an instance of JOptionPane to display a message with specified message type and default options.");
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB7ActionPerformed

    private void classobjB8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB8ActionPerformed
nesterdB.setContentAreaFilled(false);
jButton4.setContentAreaFilled(false);
jButton6.setContentAreaFilled(false);
PointerB.setContentAreaFilled(false);
classobjB.setContentAreaFilled(false);
classobjB1.setContentAreaFilled(false);
classobjB2.setContentAreaFilled(false);
classobjB3.setContentAreaFilled(false);
classobjB4.setContentAreaFilled(false);
classobjB5.setContentAreaFilled(false);
classobjB6.setContentAreaFilled(false);
classobjB7.setContentAreaFilled(false);
classobjB8.setContentAreaFilled(true);
classobjB9.setContentAreaFilled(false);

text.setText("The JButton class is used to create a labeled button that has platform independent implementation. The application result in some action when the button is pushed. It inherits AbstractButton class.\n" +
"\n" +
"JButton class declaration\n" +
"Let's see the declaration for javax.swing.JButton class.\n" +
"\n" +
"public class JButton extends AbstractButton implements Accessible  \n" +
"Commonly used Constructors:\n" +
"JButton():\n	It creates a button with no text and icon.\n" +
"JButton(String s):\n	It creates a button with the specified text.\n" +
"JButton(Icon i):\n	It creates a button with the specified icon object.");
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB8ActionPerformed

    private void classobjB9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB9ActionPerformed
nesterdB.setContentAreaFilled(false);
jButton4.setContentAreaFilled(false);
jButton6.setContentAreaFilled(false);
PointerB.setContentAreaFilled(false);
classobjB.setContentAreaFilled(false);
classobjB1.setContentAreaFilled(false);
classobjB2.setContentAreaFilled(false);
classobjB3.setContentAreaFilled(false);
classobjB4.setContentAreaFilled(false);
classobjB5.setContentAreaFilled(false);
classobjB6.setContentAreaFilled(false);
classobjB7.setContentAreaFilled(false);
classobjB8.setContentAreaFilled(false);
classobjB9.setContentAreaFilled(true);

        text.setText("JList is a component that displays a set of Objects and allows the user to select one or more items . JList inherits JComponent class.\nConstructor and Description\n" +
"JList()\n" +
"Constructs a JList with an empty, read-only, model.\n" +
"JList(E[] listData)\n" +
"Constructs a JList that displays the elements in the specified array.\n" +
"JList(ListModel<E> dataModel)\n" +
"Constructs a JList that displays elements from the specified, non-null, model.\n" +
"JList(Vector<? extends E> listData)\n" +
"Constructs a JList that displays the elements in the specified Vector.");
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB9ActionPerformed

    private void switchB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchB1ActionPerformed
//jButton3.setContentAreaFilled(false);
swingpanel.setVisible(false);
layoutspanel.setVisible(true);
eventspanel.setVisible(false);

classobjB10.setContentAreaFilled(false);
classobjB11.setContentAreaFilled(false);
classobjB12.setContentAreaFilled(false);
classobjB13.setContentAreaFilled(false);
classobjB14.setContentAreaFilled(false);
classobjB15.setContentAreaFilled(false);
        text.setText("Awt Layouts consists of:\nFlow Layout\nBorder Layout\nGrid Layout\nGrid Bag Layout\nBox Layout\nGroup Layout");
                 text.setCaretPosition(0);
    }//GEN-LAST:event_switchB1ActionPerformed

    private void classobjB10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB10ActionPerformed
classobjB10.setContentAreaFilled(true);
classobjB11.setContentAreaFilled(false);
classobjB12.setContentAreaFilled(false);
classobjB13.setContentAreaFilled(false);
classobjB14.setContentAreaFilled(false);
classobjB15.setContentAreaFilled(false);

text.setText("The FlowLayout is used to arrange the components in a line, one after another (in a flow). It is the default layout of panel.\n" +
"\n" +
"Fields of FlowLayout class\n" +
"public static final int LEFT\n" +
"public static final int RIGHT\n" +
"public static final int CENTER\n" +
"public static final int LEADING\n" +
"public static final int TRAILING\n\n" +
"Constructors of FlowLayout class\n" +
"FlowLayout(): creates a flow layout with centered alignment and a default 5 unit horizontal and vertical gap.\n" +
"FlowLayout(int align): creates a flow layout with the given alignment and a default 5 unit horizontal and vertical gap.\n" +
"FlowLayout(int align, int hgap, int vgap): creates a flow layout with the given alignment and the given horizontal and vertical gap.");
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB10ActionPerformed

    private void classobjB11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB11ActionPerformed
classobjB10.setContentAreaFilled(false);
classobjB11.setContentAreaFilled(true);
classobjB12.setContentAreaFilled(false);
classobjB13.setContentAreaFilled(false);
classobjB14.setContentAreaFilled(false);
classobjB15.setContentAreaFilled(false);

text.setText("GroupLayout is a LayoutManager that hierarchically group the components and arranges them in a Container. Grouping is done by using the instances of the Group class. It is generally used for developing a GUI ( Graphic User Interface) builders such as Matisse, the GUI builder provided with the NetBeans IDE. GroupLayout Class supports two types of groups:\n" +
"\n" +
"A sequential group positions its child elements sequentially, one after another.\n" +
"A parallel group aligns its child elements in different ways.\n" +
"Constructor of the class:\n" +
"\n" +
"GroupLayout(Container host):It is used to create a GroupLayout for the specified Container.\n" +
"Commonly Used Methods:\n" +
"\n" +
"addLayoutComponent(Component comp, Object cons): Notifiy that a Component has been added to the parent container.\n" +
"getHonorsVisibility(): Returns whether component visiblity is considered when sizing and positioning components.\n" +
"maximumLayoutSize(Container parent): Returns the maximum size for the specified container.\n" +
"getLayoutAlignmentX(along horizontal axis): It returns the alignment along the x axis.\n" +
"minimumLayoutSize(Container parent): Returns the minimum size for the specified container.\n" +
"getLayoutStyle(): Returns the LayoutStyle used for calculating the preferred gap between components.");
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB11ActionPerformed

    private void classobjB12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB12ActionPerformed
classobjB10.setContentAreaFilled(false);
classobjB11.setContentAreaFilled(false);
classobjB12.setContentAreaFilled(true);
classobjB13.setContentAreaFilled(false);
classobjB14.setContentAreaFilled(false);
classobjB15.setContentAreaFilled(false);

text.setText("BorderLayout is the default layout for the window objects such as JFrame, JWindow, JDialog, JInternalFrame etc. BorderLayout arranges the components in the five regions. Four sides are referred to as north, south, east, and west. The middle part is called the center. Each region can contain only one component and is identified by a corresponding constant as NORTH, SOUTH, EAST, WEST, and CENTER.\n" +
"\n" +
"Constructors:\n" +
"\n" +
"BorderLayout(): It will construct a new borderlayout with no gaps between the components.\n" +
"BorderLayout(int, int): It will constructs a border layout with the specified gaps between the components.\n" +
"Commonly Used Methods:\n" +
"\n" +
"toString(): Returns a string which is representation of the state of border layout.\n" +
"getLayoutAlignmentX(Container parent): Returns the layout alignment along the X-axis.\n" +
"getLayoutAlignmentY(Container parent): It will returns the layout alignment along the Y-axis.\n" +
"removeLayoutComponent(Component comp): This method is used to remove the specified component from the borderlayout.\n" +
"getVgap(): Return the vertical gap between the components.\n" +
"getHgap(): Returns the Horizontal gap between the components.\n" +
"setHgap(int hgap): It is used to set the horizontal gap between the components.\n" +
"setVgap(int vgap): It is used to set the vertical gap between the components.");
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB12ActionPerformed

    private void classobjB13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB13ActionPerformed
classobjB10.setContentAreaFilled(false);
classobjB11.setContentAreaFilled(false);
classobjB12.setContentAreaFilled(false);
classobjB13.setContentAreaFilled(true);
classobjB14.setContentAreaFilled(false);
classobjB15.setContentAreaFilled(false);

text.setText("The GridLayout is used to arrange the components in rectangular grid. One component is displayed in each rectangle.\n" +
"\n" +
"Constructors of GridLayout class\n" +
"GridLayout(): creates a grid layout with one column per component in a row.\n" +
"GridLayout(int rows, int columns): creates a grid layout with the given rows and columns but no gaps between the components.\n" +
"GridLayout(int rows, int columns, int hgap, int vgap): creates a grid layout with the given rows and columns alongwith given horizontal and vertical gaps.");
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB13ActionPerformed

    private void classobjB14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB14ActionPerformed
classobjB10.setContentAreaFilled(false);
classobjB11.setContentAreaFilled(false);
classobjB12.setContentAreaFilled(false);
classobjB13.setContentAreaFilled(false);
classobjB14.setContentAreaFilled(true);
classobjB15.setContentAreaFilled(false);

text.setText("The BoxLayout is used to arrange the components either vertically or horizontally. For this purpose, BoxLayout provides four constants. They are as follows:\n" +
"\n" +
"Fields of BoxLayout class\n" +
"public static final int X_AXIS\n" +
"public static final int Y_AXIS\n" +
"public static final int LINE_AXIS\n" +
"public static final int PAGE_AXIS\n" +
"Constructor of BoxLayout class\n" +
"BoxLayout(Container c, int axis): creates a box layout that arranges the components with the given axis.");
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB14ActionPerformed

    private void classobjB15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB15ActionPerformed
classobjB10.setContentAreaFilled(false);
classobjB11.setContentAreaFilled(false);
classobjB12.setContentAreaFilled(false);
classobjB13.setContentAreaFilled(false);
classobjB14.setContentAreaFilled(false);
classobjB15.setContentAreaFilled(true);

text.setText("The Java GridBagLayout class is used to align components vertically, horizontally or along their baseline.\n" +
"\n" +
"The components may not be of same size. Each GridBagLayout object maintains a dynamic, rectangular grid of cells. Each component occupies one or more cells known as its display area. Each component associates an instance of GridBagConstraints. With the help of constraints object we arrange component's display area on the grid. The GridBagLayout manages each component's minimum and preferred sizes in order to determine component's size.\n" +
"\n" +
"Fields\n" +
"Modifier and Type	Field	Description\n" +
"double[]	columnWeights	It is used to hold the overrides to the column weights.\n" +
"int[]	columnWidths	It is used to hold the overrides to the column minimum width.\n" +
"protected Hashtable<Component,GridBagConstraints>	comptable	It is used to maintains the association between a component and its gridbag constraints.\n" +
"protected GridBagConstraints	defaultConstraints	It is used to hold a gridbag constraints instance containing the default values.\n" +
"protected GridBagLayoutInfo	layoutInfo	It is used to hold the layout information for the gridbag.\n" +
"protected static int	MAXGRIDSIZE	No longer in use just for backward compatibility\n" +
"protected static int	MINSIZE	It is smallest grid that can be laid out by the grid bag layout.\n" +
"protected static int	PREFERREDSIZE	It is preferred grid size that can be laid out by the grid bag layout.\n" +
"int[]	rowHeights	It is used to hold the overrides to the row minimum heights.\n" +
"double[]	rowWeights	It is used to hold the overrides to the row weights.\n" +
"Useful Methods\n" +
"Modifier and Type	Method	Description\n" +
"void	addLayoutComponent(Component comp, Object constraints)	It adds specified component to the layout, using the specified constraints object.\n" +
"void	addLayoutComponent(String name, Component comp)	It has no effect, since this layout manager does not use a per-component string.\n" +
"protected void	adjustForGravity(GridBagConstraints constraints, Rectangle r)	It adjusts the x, y, width, and height fields to the correct values depending on the constraint geometry and pads.\n" +
"protected void	AdjustForGravity(GridBagConstraints constraints, Rectangle r)	This method is for backwards compatibility only\n" +
"protected void	arrangeGrid(Container parent)	Lays out the grid.\n" +
"protected void	ArrangeGrid(Container parent)	This method is obsolete and supplied for backwards compatibility\n" +
"GridBagConstraints	getConstraints(Component comp)	It is for getting the constraints for the specified component.\n" +
"float	getLayoutAlignmentX(Container parent)	It returns the alignment along the x axis.\n" +
"float	getLayoutAlignmentY(Container parent)	It returns the alignment along the y axis.\n" +
"int[][]	getLayoutDimensions()	It determines column widths and row heights for the layout grid.\n" +
"protected GridBagLayoutInfo	getLayoutInfo(Container parent, int sizeflag)	This method is obsolete and supplied for backwards compatibility.\n" +
"protected GridBagLayoutInfo	GetLayoutInfo(Container parent, int sizeflag)	This method is obsolete and supplied for backwards compatibility.\n" +
"Point	getLayoutOrigin()	It determines the origin of the layout area, in the graphics coordinate space of the target container.\n" +
"double[][]	getLayoutWeights()	It determines the weights of the layout grid's columns and rows.\n" +
"protected Dimension	getMinSize(Container parent, GridBagLayoutInfo info)	It figures out the minimum size of the master based on the information from getLayoutInfo.\n" +
"protected Dimension	GetMinSize(Container parent, GridBagLayoutInfo info)	This method is obsolete and supplied for backwards compatibility only");
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB15ActionPerformed

    private void switchB2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchB2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_switchB2ActionPerformed

    private void switchB3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchB3ActionPerformed
//jButton3.setContentAreaFilled(false);
swingpanel.setVisible(false);
layoutspanel.setVisible(false);
eventspanel.setVisible(true);

classobjB16.setContentAreaFilled(false);
classobjB17.setContentAreaFilled(false);
classobjB18.setContentAreaFilled(false);
classobjB19.setContentAreaFilled(false);
classobjB20.setContentAreaFilled(false);
classobjB21.setContentAreaFilled(false);
        text.setText("Changing the state of an object is known as an event. For example, click on button, dragging mouse etc. The java.awt.event package provides many event classes and Listener interfaces for event handling.\n We will study following events:\nAction Event\nKey Event\nMouse Event\nFocus Event\nItem Event\nWindow Event");
   text.setCaretPosition(0);
    }//GEN-LAST:event_switchB3ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
       text.setText("Here you can know about:\nException Handling\nGenerics\nRegular Expressions\nCollections\nThreads");
       text.setCaretPosition(0);
       
       IntroB.setContentAreaFilled(false);      
    basicspanel.setVisible(false);
    arraystringpanel.setVisible(false);
    oopspanel.setVisible(false);
    guipanel.setVisible(false);
    bestofjavapanel.setVisible(true);
    jdbcpanel.setVisible(false);
    
    classobjB22.setContentAreaFilled(false);
    classobjB23.setContentAreaFilled(false);
    classobjB24.setContentAreaFilled(false);
    classobjB25.setContentAreaFilled(false);
    classobjB26.setContentAreaFilled(false);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void classobjB22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB22ActionPerformed
        text.setText("An exception (or exceptional event) is a problem that arises during the execution of a program. When an Exception occurs the normal flow of the program is disrupted and the program/Application terminates abnormally, which is not recommended, therefore, these exceptions are to be handled.\n\nA method catches an exception using a combination of the try and catch keywords. A try/catch block is placed around the code that might generate an exception. Code within a try/catch block is referred to as protected code, and the syntax for using try/catch looks like the following −\n" +
"\n" +
"Syntax\n" +
"try {\n" +
"   // Protected code\n" +
"} catch (ExceptionName e1) {\n" +
"   // Catch block\n" +
"}\n\nA try block can be followed by multiple catch blocks. The syntax for multiple catch blocks looks like the following −\n" +
"\n" +
"Syntax\n" +
"try {\n" +
"   // Protected code\n" +
"} catch (ExceptionType1 e1) {\n" +
"   // Catch block\n" +
"} catch (ExceptionType2 e2) {\n" +
"   // Catch block\n" +
"} catch (ExceptionType3 e3) {\n" +
"   // Catch block\n" +
"}\n\nCatching Multiple Type of Exceptions\n" +
"Since Java 7, you can handle more than one exception using a single catch block, this feature simplifies the code. Here is how you would do it −\n" +
"\n" +
"catch (IOException|FileNotFoundException ex) {\n" +
"   logger.log(ex);\n" +
"   throw ex;\n\nThe Throws/Throw Keywords\n" +
"If a method does not handle a checked exception, the method must declare it using the throws keyword. The throws keyword appears at the end of a method's signature.\n" +
"\n" +
"You can throw an exception, either a newly instantiated one or an exception that you just caught, by using the throw keyword.\n" +
"\n" +
"Try to understand the difference between throws and throw keywords, throws is used to postpone the handling of a checked exception and throw is used to invoke an exception explicitly.\n\nThe Finally Block\n" +
"The finally block follows a try block or a catch block. A finally block of code always executes, irrespective of occurrence of an Exception.\n" +
"\n" +
"Using a finally block allows you to run any cleanup-type statements that you want to execute, no matter what happens in the protected code.\n" +
"\n" +
"A finally block appears at the end of the catch blocks and has the following syntax −\n" +
"\n" +
"Syntax\n" +
"try {\n" +
"   // Protected code\n" +
"} catch (ExceptionType1 e1) {\n" +
"   // Catch block\n" +
"} catch (ExceptionType2 e2) {\n" +
"   // Catch block\n" +
"} catch (ExceptionType3 e3) {\n" +
"   // Catch block\n" +
"}finally {\n" +
"   // The finally block always executes.\n" +
"}\n\nThe try-with-resources\n" +
"Generally, when we use any resources like streams, connections, etc. we have to close them explicitly using finally block. In the following program, we are reading data from a file using FileReader and we are closing it using finally block.\n\nUser-defined Exceptions\n" +
"You can create your own exceptions in Java. Keep the following points in mind when writing your own exception classes −\n" +
"\n" +
"All exceptions must be a child of Throwable.\n" +
"\n" +
"If you want to write a checked exception that is automatically enforced by the Handle or Declare Rule, you need to extend the Exception class.\n" +
"\n" +
"If you want to write a runtime exception, you need to extend the RuntimeException class.\n" +
"\n" +
"We can define our own Exception class as below −\n" +
"\n" +
"class MyException extends Exception {\n" +
"}\n" +
"You just need to extend the predefined Exception class to create your own Exception. These are considered to be checked exceptions. ");
        
  text.setCaretPosition(0);
  
  classobjB22.setContentAreaFilled(true);
    classobjB23.setContentAreaFilled(false);
    classobjB24.setContentAreaFilled(false);
    classobjB25.setContentAreaFilled(false);
    classobjB26.setContentAreaFilled(false);
    }//GEN-LAST:event_classobjB22ActionPerformed

    private void classobjB23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB23ActionPerformed
        text.setText("The Java Generics programming is introduced in J2SE 5 to deal with type-safe objects. It makes the code stable by detecting the bugs at compile time.\n" +
"\n" +
"Before generics, we can store any type of objects in the collection, i.e., non-generic. Now generics force the java programmer to store a specific type of objects.\n" +
"\n" +
"Advantage of Java Generics\n" +
"There are mainly 3 advantages of generics. They are as follows:\n" +
"\n" +
"\n" +
"1) Type-safety: We can hold only a single type of objects in generics. It doesn?t allow to store other objects.\n" +
"\n" +
"Without Generics, we can store any type of objects.\n" +
"\n" +
"List list = new ArrayList();    \n" +
"list.add(10);  \n" +
"list.add(\"10\");  \n" +
"With Generics, it is required to specify the type of object we need to store.  \n" +
"List<Integer> list = new ArrayList<Integer>();    \n" +
"list.add(10);  \n" +
"list.add(\"10\");// compile-time error  \n" +
"2) Type casting is not required: There is no need to typecast the object.\n" +
"\n" +
"Before Generics, we need to type cast.\n" +
"\n" +
"List list = new ArrayList();    \n" +
"list.add(\"hello\");    \n" +
"String s = (String) list.get(0);//typecasting    \n" +
"After Generics, we don't need to typecast the object.  \n" +
"List<String> list = new ArrayList<String>();    \n" +
"list.add(\"hello\");    \n" +
"String s = list.get(0);    \n" +
"3) Compile-Time Checking: It is checked at compile time so problem will not occur at runtime. The good programming strategy says it is far better to handle the problem at compile time than runtime.\n" +
"\n" +
"List<String> list = new ArrayList<String>();    \n" +
"list.add(\"hello\");    \n" +
"list.add(32);//Compile Time Error    \n" +
"Syntax to use generic collection\n" +
"\n" +
"ClassOrInterface<Type>    \n" +
"Example to use Generics in java\n" +
"\n" +
"ArrayList<String>    \n\nGeneric class\n" +
"A class that can refer to any type is known as a generic class. Here, we are using the T type parameter to create the generic class of specific type.\n" +
"\n" +
"Let's see a simple example to create and use the generic class.\n" +
"\n" +
"Creating a generic class:\n" +
"class MyGen<T>{  \n" +
"T obj;  \n" +
"void add(T obj){this.obj=obj;}  \n" +
"T get(){return obj;}  \n" +
"}  \n" +
"The T type indicates that it can refer to any type (like String, Integer, and Employee). The type you specify for the class will be used to store and retrieve the data.");

        text.setCaretPosition(0);
        
        classobjB22.setContentAreaFilled(false);
    classobjB23.setContentAreaFilled(true);
    classobjB24.setContentAreaFilled(false);
    classobjB25.setContentAreaFilled(false);
    classobjB26.setContentAreaFilled(false);
    }//GEN-LAST:event_classobjB23ActionPerformed

    private void classobjB24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB24ActionPerformed
        text.setText("The Java Regex or Regular Expression is an API to define a pattern for searching or manipulating strings.\n" +
"\n" +
"It is widely used to define the constraint on strings such as password and email validation. After learning Java regex tutorial, you will be able to test your regular expressions by the Java Regex Tester Tool.\n" +
"\n" +
"Java Regex API provides 1 interface and 3 classes in java.util.regex package.\n" +
"\n" +
"\n" +
"java.util.regex package\n" +
"The Matcher and Pattern classes provide the facility of Java regular expression. The java.util.regex package provides following classes and interfaces for regular expressions.\n" +
"\n" +
"MatchResult interface\n" +
"Matcher class\n" +
"Pattern class\n" +
"PatternSyntaxException class\n" +
"Java Regex API\n" +
"Matcher class\n" +
"It implements the MatchResult interface. It is a regex engine which is used to perform match operations on a character sequence.\n" +
"\n" +
"No.	Method	Description\n" +
"1	boolean matches()	test whether the regular expression matches the pattern.\n" +
"2	boolean find()	finds the next expression that matches the pattern.\n" +
"3	boolean find(int start)	finds the next expression that matches the pattern from the given start number.\n" +
"4	String group()	returns the matched subsequence.\n" +
"5	int start()	returns the starting index of the matched subsequence.\n" +
"6	int end()	returns the ending index of the matched subsequence.\n" +
"7	int groupCount()	returns the total number of the matched subsequence.\n" +
"\n" +
" \n" +
"Pattern class\n" +
"It is the compiled version of a regular expression. It is used to define a pattern for the regex engine.\n" +
"\n" +
"No.	Method	Description\n" +
"1	static Pattern compile(String regex)	compiles the given regex and returns the instance of the Pattern.\n" +
"2	Matcher matcher(CharSequence input)	creates a matcher that matches the given input with the pattern.\n" +
"3	static boolean matches(String regex, CharSequence input)	It works as the combination of compile and matcher methods. It compiles the regular expression and matches the given input with the pattern.\n" +
"4	String[] split(CharSequence input)	splits the given input string around matches of given pattern.\n" +
"5	String pattern()	returns the regex pattern.");

        text.setCaretPosition(0);
        
        classobjB22.setContentAreaFilled(false);
    classobjB23.setContentAreaFilled(false);
    classobjB24.setContentAreaFilled(true);
    classobjB25.setContentAreaFilled(false);
    classobjB26.setContentAreaFilled(false);
    }//GEN-LAST:event_classobjB24ActionPerformed

    private void classobjB25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB25ActionPerformed
classobjB22.setContentAreaFilled(false);
    classobjB23.setContentAreaFilled(false);
    classobjB24.setContentAreaFilled(false);
    classobjB25.setContentAreaFilled(true);
    classobjB26.setContentAreaFilled(false);

        text.setText("A thread, in the context of Java, is the path followed when executing a program. All Java programs have at least one thread, known as the main thread, which is created by the Java Virtual Machine (JVM) at the program's start, when the main() method is invoked with the main thread.\n\nHow to create thread\n" +
"There are two ways to create a thread:\n" +
"\n" +
"By extending Thread class\n" +
"By implementing Runnable interface.\n" +
"Thread class:\n" +
"Thread class provide constructors and methods to create and perform operations on a thread.Thread class extends Object class and implements Runnable interface.\n" +
"Commonly used Constructors of Thread class:\n" +
"Thread()\n" +
"Thread(String name)\n" +
"Thread(Runnable r)\n" +
"Thread(Runnable r,String name)\n" +
"Commonly used methods of Thread class:\n" +
"public void run(): is used to perform action for a thread.\n" +
"public void start(): starts the execution of the thread.JVM calls the run() method on the thread.\n" +
"public void sleep(long miliseconds): Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds.\n" +
"public void join(): waits for a thread to die.\n" +
"public void join(long miliseconds): waits for a thread to die for the specified miliseconds.\n" +
"public int getPriority(): returns the priority of the thread.\n" +
"public int setPriority(int priority): changes the priority of the thread.\n" +
"public String getName(): returns the name of the thread.\n" +
"public void setName(String name): changes the name of the thread.\n" +
"public Thread currentThread(): returns the reference of currently executing thread.\n" +
"public int getId(): returns the id of the thread.\n" +
"public Thread.State getState(): returns the state of the thread.\n" +
"public boolean isAlive(): tests if the thread is alive.\n" +
"public void yield(): causes the currently executing thread object to temporarily pause and allow other threads to execute.\n" +
"public void suspend(): is used to suspend the thread(depricated).\n" +
"public void resume(): is used to resume the suspended thread(depricated).\n" +
"public void stop(): is used to stop the thread(depricated).\n" +
"public boolean isDaemon(): tests if the thread is a daemon thread.\n" +
"public void setDaemon(boolean b): marks the thread as daemon or user thread.\n" +
"public void interrupt(): interrupts the thread.\n" +
"public boolean isInterrupted(): tests if the thread has been interrupted.\n" +
"public static boolean interrupted(): tests if the current thread has been interrupted.\n" +
"\n" +
" \n" +
"Runnable interface:\n" +
"The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread. Runnable interface have only one method named run().\n" +
"public void run(): is used to perform action for a thread.");

        text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB25ActionPerformed

    private void classobjB26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB26ActionPerformed
classobjB22.setContentAreaFilled(false);
    classobjB23.setContentAreaFilled(false);
    classobjB24.setContentAreaFilled(false);
    classobjB25.setContentAreaFilled(false);
    classobjB26.setContentAreaFilled(true);

        text.setText("The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.\n" +
"\n" +
"Java Collections can achieve all the operations that you perform on a data such as searching, sorting, insertion, manipulation, and deletion.\n" +
"\n" +
"Java Collection means a single unit of objects. Java Collection framework provides many interfaces (Set, List, Queue, Deque) and classes (ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).\n" +
"\n" +
"\n" +
"What is Collection in Java\n" +
"A Collection represents a single unit of objects, i.e., a group.\n" +
"\n" +
"What is a framework in Java\n" +
"It provides readymade architecture.\n" +
"It represents a set of classes and interfaces.\n" +
"It is optional.\n" +
"What is Collection framework\n" +
"The Collection framework represents a unified architecture for storing and manipulating a group of objects. It has:\n" +
"\n" +
"Interfaces and its implementations, i.e., classes\n" +
"Algorithm\n\nnext →← prev\n" +
"Collections in Java\n" +
"Java Collection Framework\n" +
"Hierarchy of Collection Framework\n" +
"Collection interface\n" +
"Iterator interface\n" +
"The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.\n" +
"\n" +
"Java Collections can achieve all the operations that you perform on a data such as searching, sorting, insertion, manipulation, and deletion.\n" +
"\n" +
"Java Collection means a single unit of objects. Java Collection framework provides many interfaces (Set, List, Queue, Deque) and classes (ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).\n" +
"\n" +
"\n" +
"What is Collection in Java\n" +
"A Collection represents a single unit of objects, i.e., a group.\n" +
"\n" +
"What is a framework in Java\n" +
"It provides readymade architecture.\n" +
"It represents a set of classes and interfaces.\n" +
"It is optional.\n" +
"What is Collection framework\n" +
"The Collection framework represents a unified architecture for storing and manipulating a group of objects. It has:\n" +
"\n" +
"Interfaces and its implementations, i.e., classes\n" +
"Algorithm\n" +
"\n" +
"\n" +
" Do You Know?\n" +
"What are the two ways to iterate the elements of a collection?\n" +
"What is the difference between ArrayList and LinkedList classes in collection framework?\n" +
"What is the difference between ArrayList and Vector classes in collection framework?\n" +
"What is the difference between HashSet and HashMap classes in collection framework?\n" +
"What is the difference between HashMap and Hashtable class?\n" +
"What is the difference between Iterator and Enumeration interface in collection framework?\n" +
"How can we sort the elements of an object? What is the difference between Comparable and Comparator interfaces?\n" +
"What does the hashcode() method?\n" +
"What is the difference between Java collection and Java collections?\n" +
"Hierarchy of Collection Framework\n" +
"Let us see the hierarchy of Collection framework. The java.util package contains all the classes and interfaces for the Collection framework.\n" +
"\n" +
"Hierarchy of Java Collection framework\n" +
"Methods of Collection interface\n" +
"There are many methods declared in the Collection interface. They are as follows:\n" +
"\n" +
"No.	Method	Description\n" +
"1	public boolean add(E e)	It is used to insert an element in this collection.\n" +
"2	public boolean addAll(Collection<? extends E> c)	It is used to insert the specified collection elements in the invoking collection.\n" +
"3	public boolean remove(Object element)	It is used to delete an element from the collection.\n" +
"4	public boolean removeAll(Collection<?> c)	It is used to delete all the elements of the specified collection from the invoking collection.\n" +
"5	default boolean removeIf(Predicate<? super E> filter)	It is used to delete all the elements of the collection that satisfy the specified predicate.\n" +
"6	public boolean retainAll(Collection<?> c)	It is used to delete all the elements of invoking collection except the specified collection.\n" +
"7	public int size()	It returns the total number of elements in the collection.\n" +
"8	public void clear()	It removes the total number of elements from the collection.\n" +
"9	public boolean contains(Object element)	It is used to search an element.\n" +
"10	public boolean containsAll(Collection<?> c)	It is used to search the specified collection in the collection.\n" +
"11	public Iterator iterator()	It returns an iterator.\n" +
"12	public Object[] toArray()	It converts collection into array.\n" +
"13	public <T> T[] toArray(T[] a)	It converts collection into array. Here, the runtime type of the returned array is that of the specified array.\n" +
"14	public boolean isEmpty()	It checks if collection is empty.\n" +
"15	default Stream<E> parallelStream()	It returns a possibly parallel Stream with the collection as its source.\n" +
"16	default Stream<E> stream()	It returns a sequential Stream with the collection as its source.\n" +
"17	default Spliterator<E> spliterator()	It generates a Spliterator over the specified elements in the collection.\n" +
"18	public boolean equals(Object element)	It matches two collections.\n" +
"19	public int hashCode()	It returns the hash code number of the collection.");

        text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB26ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        text.setText("To know about JDBC(Java Database Connectivity) click on sub-tabs");

        text.setCaretPosition(0);
        
        IntroB.setContentAreaFilled(false);      
    basicspanel.setVisible(false);
    arraystringpanel.setVisible(false);
    oopspanel.setVisible(false);
    guipanel.setVisible(false);
    bestofjavapanel.setVisible(false);
    jdbcpanel.setVisible(true);
    
    classobjB27.setContentAreaFilled(false);
    classobjB28.setContentAreaFilled(false);
    classobjB29.setContentAreaFilled(false);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void classobjB27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB27ActionPerformed
        text.setText("JDBC Driver is a software component that enables java application to interact with the database. There are 4 types of JDBC drivers:\n" +
"JDBC-ODBC bridge driver\n" +
"Native-API driver (partially java driver)\n" +
"Network Protocol driver (fully java driver)\n" +
"Thin driver (fully java driver)\n" +
"1) JDBC-ODBC bridge driver\n" +
"The JDBC-ODBC bridge driver uses ODBC driver to connect to the database. The JDBC-ODBC bridge driver converts JDBC method calls into the ODBC function calls. This is now discouraged because of thin driver.\n" +
"bridge driver\n" +
"In Java 8, the JDBC-ODBC Bridge has been removed.\n" +
"Oracle does not support the JDBC-ODBC Bridge from Java 8. Oracle recommends that you use JDBC drivers provided by the vendor of your database instead of the JDBC-ODBC Bridge.\n" +
"\n" +
"Advantages:\n" +
"easy to use.\n" +
"can be easily connected to any database.\n" +
"Disadvantages:\n" +
"Performance degraded because JDBC method call is converted into the ODBC function calls.\n" +
"The ODBC driver needs to be installed on the client machine.\n" +
"\n" +
" \n" +
"2) Native-API driver\n" +
"The Native API driver uses the client-side libraries of the database. The driver converts JDBC method calls into native calls of the database API. It is not written entirely in java.\n" +
"Native-API driver\n" +
"Advantage:\n" +
"performance upgraded than JDBC-ODBC bridge driver.\n" +
"Disadvantage:\n" +
"The Native driver needs to be installed on the each client machine.\n" +
"The Vendor client library needs to be installed on client machine.\n" +
"3) Network Protocol driver\n" +
"The Network Protocol driver uses middleware (application server) that converts JDBC calls directly or indirectly into the vendor-specific database protocol. It is fully written in java.\n" +
"\n" +
"Network Protocol driver\n" +
"Advantage:\n" +
"No client side library is required because of application server that can perform many tasks like auditing, load balancing, logging etc.\n" +
"Disadvantages:\n" +
"Network support is required on client machine.\n" +
"Requires database-specific coding to be done in the middle tier.\n" +
"Maintenance of Network Protocol driver becomes costly because it requires database-specific coding to be done in the middle tier.\n" +
"4) Thin driver\n" +
"The thin driver converts JDBC calls directly into the vendor-specific database protocol. That is why it is known as thin driver. It is fully written in Java language.\n" +
"Thin driver\n" +
"Advantage:\n" +
"Better performance than all other drivers.\n" +
"No software is required at client side or server side.\n" +
"Disadvantage:\n" +
"Drivers depend on the Database.");

        text.setCaretPosition(0);
        
        classobjB27.setContentAreaFilled(true);
    classobjB28.setContentAreaFilled(false);
    classobjB29.setContentAreaFilled(false);
    }//GEN-LAST:event_classobjB27ActionPerformed

    private void classobjB28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB28ActionPerformed
        text.setText("There are 5 steps to connect any java application with the database using JDBC. These steps are as follows:\n" +
"Register the Driver class\n" +
"Create connection\n" +
"Create statement\n" +
"Execute queries\n" +
"Close connection\n\n" +
"Java Database Connectivity Steps\n" +
"1) Register the driver class\n" +
"The forName() method of Class class is used to register the driver class. This method is used to dynamically load the driver class.\n" +
"Syntax of forName() method\n" +
"public static void forName(String className)throws ClassNotFoundException  \n" +
"Note: Since JDBC 4.0, explicitly registering the driver is optional. We just need to put vender's Jar in the classpath, and then JDBC driver manager can detect and load the driver automatically.\n" +
"Example to register the OracleDriver class\n" +
"Here, Java program is loading oracle driver to esteblish database connection.\n" +
"\n" +
"Class.forName(\"oracle.jdbc.driver.OracleDriver\");  \n" +
"\n" +
" \n" +
"2) Create the connection object\n" +
"The getConnection() method of DriverManager class is used to establish connection with the database.\n" +
"Syntax of getConnection() method\n" +
"1) public static Connection getConnection(String url)throws SQLException  \n" +
"2) public static Connection getConnection(String url,String name,String password)  \n" +
"throws SQLException  \n" +
"Example to establish connection with the Oracle database\n" +
"Connection con=DriverManager.getConnection(  \n" +
"\"jdbc:oracle:thin:@localhost:1521:xe\",\"system\",\"password\");  \n" +
"3) Create the Statement object\n" +
"The createStatement() method of Connection interface is used to create statement. The object of statement is responsible to execute queries with the database.\n" +
"Syntax of createStatement() method\n" +
"public Statement createStatement()throws SQLException  \n" +
"Example to create the statement object\n" +
"Statement stmt=con.createStatement();  \n" +
"4) Execute the query\n" +
"The executeQuery() method of Statement interface is used to execute queries to the database. This method returns the object of ResultSet that can be used to get all the records of a table.\n" +
"Syntax of executeQuery() method\n" +
"public ResultSet executeQuery(String sql)throws SQLException  \n" +
"Example to execute query\n" +
"ResultSet rs=stmt.executeQuery(\"select * from emp\");  \n" +
"  \n" +
"while(rs.next()){  \n" +
"System.out.println(rs.getInt(1)+\" \"+rs.getString(2));  \n" +
"}  \n" +
"5) Close the connection object\n" +
"By closing connection object statement and ResultSet will be closed automatically. The close() method of Connection interface is used to close the connection.\n" +
"Syntax of close() method\n" +
"public void close()throws SQLException  \n" +
"Example to close connection\n" +
"con.close();  \n" +
"Note: Since Java 7, JDBC has ability to use try-with-resources statement to automatically close resources of type Connection, ResultSet, and Statement.\n" +
"It avoids explicit connection closing step.");

        text.setCaretPosition(0);
        
        classobjB27.setContentAreaFilled(false);
    classobjB28.setContentAreaFilled(true);
    classobjB29.setContentAreaFilled(false);
    }//GEN-LAST:event_classobjB28ActionPerformed

    private void classobjB29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB29ActionPerformed
        text.setText("Type of ResultSet\n" +
"The possible RSType are given below. If you do not specify any ResultSet type, you will automatically get one that is TYPE_FORWARD_ONLY.\n" +
"\n" +
"Type	Description\n" +
"ResultSet.TYPE_FORWARD_ONLY	The cursor can only move forward in the result set.\n" +
"ResultSet.TYPE_SCROLL_INSENSITIVE	The cursor can scroll forward and backward, and the result set is not sensitive to changes made by others to the database that occur after the result set was created.\n" +
"ResultSet.TYPE_SCROLL_SENSITIVE.	The cursor can scroll forward and backward, and the result set is sensitive to changes made by others to the database that occur after the result set was created.\n" +
"Concurrency of ResultSet\n" +
"The possible RSConcurrency are given below. If you do not specify any Concurrency type, you will automatically get one that is CONCUR_READ_ONLY.\n" +
"\n" +
"Concurrency	Description\n" +
"ResultSet.CONCUR_READ_ONLY	Creates a read-only result set. This is the default\n" +
"ResultSet.CONCUR_UPDATABLE	Creates an updateable result set.");
        
        text.setCaretPosition(0);
        
        classobjB27.setContentAreaFilled(false);
    classobjB28.setContentAreaFilled(false);
    classobjB29.setContentAreaFilled(true);
    }//GEN-LAST:event_classobjB29ActionPerformed

    private void classobjB17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB17ActionPerformed
classobjB16.setContentAreaFilled(false);
classobjB17.setContentAreaFilled(true);
classobjB18.setContentAreaFilled(false);
classobjB19.setContentAreaFilled(false);
classobjB20.setContentAreaFilled(false);
classobjB21.setContentAreaFilled(false);

text.setText("An event which indicates that a mouse action occurred in a component. A mouse action is considered to occur in a particular component if and only if the mouse cursor is over the unobscured part of the component's bounds when the action happens. For lightweight components, such as Swing's components, mouse events are only dispatched to the component if the mouse event type has been enabled on the component. A mouse event type is enabled by adding the appropriate mouse-based EventListener to the component (MouseListener or MouseMotionListener), or by invoking Component.enableEvents(long) with the appropriate mask parameter (AWTEvent.MOUSE_EVENT_MASK or AWTEvent.MOUSE_MOTION_EVENT_MASK). If the mouse event type has not been enabled on the component, the corresponding mouse events are dispatched to the first ancestor that has enabled the mouse event type.\n\nConstructor and Description\n" +
            "MouseEvent(Component source, int id, long when, int modifiers, int x, int y, int clickCount, boolean popupTrigger)\n" +
            "Constructs a MouseEvent object with the specified source component, type, modifiers, coordinates, click count, and popupTrigger flag.\n" +
            "MouseEvent(Component source, int id, long when, int modifiers, int x, int y, int clickCount, boolean popupTrigger, int button)\n" +
            "Constructs a MouseEvent object with the specified source component, type, time, modifiers, coordinates, click count, popupTrigger flag, and button number.\n" +
            "MouseEvent(Component source, int id, long when, int modifiers, int x, int y, int xAbs, int yAbs, int clickCount, boolean popupTrigger, int button)\n" +
            "Constructs a MouseEvent object with the specified source component, type, time, modifiers, coordinates, absolute coordinates, click count, popupTrigger flag, and button number.\n" +
            "Methods \n" +
            "Modifier and Type	Method and Description\n" +
            "int	getButton()\n" +
            "Returns which, if any, of the mouse buttons has changed state.\n" +
            "int	getClickCount()\n" +
            "Returns the number of mouse clicks associated with this event.\n" +
            "Point	getLocationOnScreen()\n" +
            "Returns the absolute x, y position of the event.\n" +
            "int	getModifiersEx()\n" +
            "Returns the extended modifier mask for this event.\n" +
            "static String	getMouseModifiersText(int modifiers)\n" +
            "Returns a String instance describing the modifier keys and mouse buttons that were down during the event, such as \"Shift\", or \"Ctrl+Shift\".\n" +
            "Point	getPoint()\n" +
            "Returns the x,y position of the event relative to the source component.\n" +
            "int	getX()\n" +
            "Returns the horizontal x position of the event relative to the source component.\n" +
            "int	getXOnScreen()\n" +
            "Returns the absolute horizontal x position of the event.\n" +
            "int	getY()\n" +
            "Returns the vertical y position of the event relative to the source component.\n" +
            "int	getYOnScreen()\n" +
            "Returns the absolute vertical y position of the event.\n" +
            "boolean	isPopupTrigger()\n" +
            "Returns whether or not this mouse event is the popup menu trigger event for the platform.\n" +
            "String	paramString()\n" +
            "Returns a parameter string identifying this event.\n" +
            "void	translatePoint(int x, int y)\n" +
            "Translates the event's coordinates to a new position by adding specified x (horizontal) and y (vertical) offsets.");
        
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB17ActionPerformed

    private void classobjB19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB19ActionPerformed
classobjB16.setContentAreaFilled(false);
classobjB17.setContentAreaFilled(false);
classobjB18.setContentAreaFilled(false);
classobjB19.setContentAreaFilled(true);
classobjB20.setContentAreaFilled(false);
classobjB21.setContentAreaFilled(false);

text.setText("A semantic event which indicates that an item was selected or deselected. This high-level event is generated by an ItemSelectable object (such as a List) when an item is selected or deselected by the user. The event is passed to every ItemListener object which registered to receive such events using the component's addItemListener method.\n" +
            "The object that implements the ItemListener interface gets this ItemEvent when the event occurs. The listener is spared the details of processing individual mouse movements and mouse clicks, and can instead process a \"meaningful\" (semantic) event like \"item selected\" or \"item deselected\".\n\nConstructor and Description\n" +
            "ItemEvent(ItemSelectable source, int id, Object item, int stateChange)\n" +
            "Constructs an ItemEvent object.\n" +
            "Method Summary\n" +
            "Methods \n" +
            "Modifier and Type	Method and Description\n" +
            "Object	getItem()\n" +
            "Returns the item affected by the event.\n" +
            "ItemSelectable	getItemSelectable()\n" +
            "Returns the originator of the event.\n" +
            "int	getStateChange()\n" +
            "Returns the type of state change (selected or deselected).\n" +
            "String	paramString()\n" +
            "Returns a parameter string identifying this item event.");
        
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB19ActionPerformed

    private void classobjB16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB16ActionPerformed
classobjB16.setContentAreaFilled(true);
classobjB17.setContentAreaFilled(false);
classobjB18.setContentAreaFilled(false);
classobjB19.setContentAreaFilled(false);
classobjB20.setContentAreaFilled(false);
classobjB21.setContentAreaFilled(false);

text.setText("A semantic event which indicates that a component-defined action occurred. This high-level event is generated by a component (such as a Button) when the component-specific action occurs (such as being pressed). The event is passed to every ActionListener object that registered to receive such events using the component's addActionListener method.The object that implements the ActionListener interface gets this ActionEvent when the event occurs. The listener is therefore spared the details of processing individual mouse movements and mouse clicks, and can instead process a \"meaningful\" (semantic) event like \"button pressed\".\n" +
            "\n" +
            "An unspecified behavior will be caused if the id parameter of any particular ActionEvent instance is not in the range from ACTION_FIRST to ACTION_LAST.\n\nConstructor and Description\n" +
            "ActionEvent(Object source, int id, String command)\n" +
            "Constructs an ActionEvent object.\n" +
            "ActionEvent(Object source, int id, String command, int modifiers)\n" +
            "Constructs an ActionEvent object with modifier keys.\n" +
            "ActionEvent(Object source, int id, String command, long when, int modifiers)\n" +
            "Constructs an ActionEvent object with the specified modifier keys and timestamp.\n" +
            "\nMethods \n" +
            "Modifier and Type	Method and Description\n" +
            "String	getActionCommand()\n" +
            "Returns the command string associated with this action.\n" +
            "int	getModifiers()\n" +
            "Returns the modifier keys held down during this action event.\n" +
            "long	getWhen()\n" +
            "Returns the timestamp of when this event occurred.\n" +
            "String	paramString()\n" +
            "Returns a parameter string identifying this action event.");
        
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB16ActionPerformed

    private void classobjB21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB21ActionPerformed
classobjB16.setContentAreaFilled(false);
classobjB17.setContentAreaFilled(false);
classobjB18.setContentAreaFilled(false);
classobjB19.setContentAreaFilled(false);
classobjB20.setContentAreaFilled(false);
classobjB21.setContentAreaFilled(true);

text.setText("A low-level event which indicates that a Component has gained or lost the input focus. This low-level event is generated by a Component (such as a TextField). The event is passed to every FocusListener or FocusAdapter object which registered to receive such events using the Component's addFocusListener method. ( FocusAdapter objects implement the FocusListener interface.) Each such listener object gets this FocusEvent when the event occurs.\n" +
            "There are two levels of focus events: permanent and temporary. Permanent focus change events occur when focus is directly moved from one Component to another, such as through a call to requestFocus() or as the user uses the TAB key to traverse Components. Temporary focus change events occur when focus is temporarily lost for a Component as the indirect result of another operation, such as Window deactivation or a Scrollbar drag. In this case, the original focus state will automatically be restored once that operation is finished, or, for the case of Window deactivation, when the Window is reactivated. Both permanent and temporary focus events are delivered using the FOCUS_GAINED and FOCUS_LOST event ids; the level may be distinguished in the event using the isTemporary() method.\n\nConstructor and Description\n" +
            "FocusEvent(Component source, int id)\n" +
            "Constructs a FocusEvent object and identifies it as a permanent change in focus.\n" +
            "FocusEvent(Component source, int id, boolean temporary)\n" +
            "Constructs a FocusEvent object and identifies whether or not the change is temporary.\n" +
            "FocusEvent(Component source, int id, boolean temporary, Component opposite)\n" +
            "Constructs a FocusEvent object with the specified temporary state and opposite Component.\n" +
            "Method Summary\n" +
            "Methods \n" +
            "Modifier and Type	Method and Description\n" +
            "Component	getOppositeComponent()\n" +
            "Returns the other Component involved in this focus change.\n" +
            "boolean	isTemporary()\n" +
            "Identifies the focus change event as temporary or permanent.\n" +
            "String	paramString()\n" +
            "Returns a parameter string identifying this event.");
        text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB21ActionPerformed

    private void classobjB18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB18ActionPerformed
classobjB16.setContentAreaFilled(false);
classobjB17.setContentAreaFilled(false);
classobjB18.setContentAreaFilled(true);
classobjB19.setContentAreaFilled(false);
classobjB20.setContentAreaFilled(false);
classobjB21.setContentAreaFilled(false);

text.setText("An event which indicates that a keystroke occurred in a component.\n" +
            "This low-level event is generated by a component object (such as a text field) when a key is pressed, released, or typed. The event is passed to every KeyListener or KeyAdapter object which registered to receive such events using the component's addKeyListener method. (KeyAdapter objects implement the KeyListener interface.) Each such listener object gets this KeyEvent when the event occurs.\n" +
            "\n" +
            "\"Key typed\" events are higher-level and generally do not depend on the platform or keyboard layout. They are generated when a Unicode character is entered, and are the preferred way to find out about character input. In the simplest case, a key typed event is produced by a single key press (e.g., 'a'). Often, however, characters are produced by series of key presses (e.g., 'shift' + 'a'), and the mapping from key pressed events to key typed events may be many-to-one or many-to-many. Key releases are not usually necessary to generate a key typed event, but there are some cases where the key typed event is not generated until a key is released (e.g., entering ASCII sequences via the Alt-Numpad method in Windows). No key typed events are generated for keys that don't generate Unicode characters (e.g., action keys, modifier keys, etc.).\n\nConstructor and Description\n" +
            "KeyEvent(Component source, int id, long when, int modifiers, int keyCode)\n" +
            "Deprecated. \n" +
            "as of JDK1.1\n" +
            "KeyEvent(Component source, int id, long when, int modifiers, int keyCode, char keyChar)\n" +
            "Constructs a KeyEvent object.\n" +
            "KeyEvent(Component source, int id, long when, int modifiers, int keyCode, char keyChar, int keyLocation)\n" +
            "Constructs a KeyEvent object.\n" +
            "\nMethods \n" +
            "Modifier and Type	Method and Description\n" +
            "int	getExtendedKeyCode()\n" +
            "Returns an extended key code for the event.\n" +
            "static int	getExtendedKeyCodeForChar(int c)\n" +
            "Returns an extended key code for a unicode character.\n" +
            "char	getKeyChar()\n" +
            "Returns the character associated with the key in this event.\n" +
            "int	getKeyCode()\n" +
            "Returns the integer keyCode associated with the key in this event.\n" +
            "int	getKeyLocation()\n" +
            "Returns the location of the key that originated this key event.\n" +
            "static String	getKeyModifiersText(int modifiers)\n" +
            "Returns a String describing the modifier key(s), such as \"Shift\", or \"Ctrl+Shift\".\n" +
            "static String	getKeyText(int keyCode)\n" +
            "Returns a String describing the keyCode, such as \"HOME\", \"F1\" or \"A\".\n" +
            "boolean	isActionKey()\n" +
            "Returns whether the key in this event is an \"action\" key.\n" +
            "String	paramString()\n" +
            "Returns a parameter string identifying this event.\n" +
            "void	setKeyChar(char keyChar)\n" +
            "Set the keyChar value to indicate a logical character.\n" +
            "void	setKeyCode(int keyCode)\n" +
            "Set the keyCode value to indicate a physical key.\n" +
            "void	setModifiers(int modifiers)\n" +
            "Deprecated. \n" +
            "as of JDK1.1.4");
        
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB18ActionPerformed

    private void classobjB20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classobjB20ActionPerformed
classobjB16.setContentAreaFilled(false);
classobjB17.setContentAreaFilled(false);
classobjB18.setContentAreaFilled(false);
classobjB19.setContentAreaFilled(false);
classobjB20.setContentAreaFilled(true);
classobjB21.setContentAreaFilled(false);

text.setText("A low-level event that indicates that a window has changed its status. This low-level event is generated by a Window object when it is opened, closed, activated, deactivated, iconified, or deiconified, or when focus is transfered into or out of the Window.\n" +
            "The event is passed to every WindowListener or WindowAdapter object which registered to receive such events using the window's addWindowListener method. (WindowAdapter objects implement the WindowListener interface.) Each such listener object gets this WindowEvent when the event occurs.\n\nConstructor and Description\n" +
            "WindowEvent(Window source, int id)\n" +
            "Constructs a WindowEvent object.\n" +
            "WindowEvent(Window source, int id, int oldState, int newState)\n" +
            "Constructs a WindowEvent object with the specified previous and new window states.\n" +
            "WindowEvent(Window source, int id, Window opposite)\n" +
            "Constructs a WindowEvent object with the specified opposite Window.\n" +
            "WindowEvent(Window source, int id, Window opposite, int oldState, int newState)\n" +
            "Constructs a WindowEvent object.\n" +
            "Method Summary\n" +
            "Methods \n" +
            "Modifier and Type	Method and Description\n" +
            "int	getNewState()\n" +
            "For WINDOW_STATE_CHANGED events returns the new state of the window.\n" +
            "int	getOldState()\n" +
            "For WINDOW_STATE_CHANGED events returns the previous state of the window.\n" +
            "Window	getOppositeWindow()\n" +
            "Returns the other Window involved in this focus or activation change.\n" +
            "Window	getWindow()\n" +
            "Returns the originator of the event.\n" +
            "String	paramString()\n" +
            "Returns a parameter string identifying this event.");
        
                 text.setCaretPosition(0);
    }//GEN-LAST:event_classobjB20ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        new j(c,"Java").setVisible(true);
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton IntroB;
    private javax.swing.JButton PointerB;
    private javax.swing.JButton arrarB;
    private javax.swing.JPanel arraystringpanel;
    private javax.swing.JPanel basicspanel;
    private javax.swing.JPanel bestofjavapanel;
    private javax.swing.JButton classobjB;
    private javax.swing.JButton classobjB1;
    private javax.swing.JButton classobjB10;
    private javax.swing.JButton classobjB11;
    private javax.swing.JButton classobjB12;
    private javax.swing.JButton classobjB13;
    private javax.swing.JButton classobjB14;
    private javax.swing.JButton classobjB15;
    private javax.swing.JButton classobjB16;
    private javax.swing.JButton classobjB17;
    private javax.swing.JButton classobjB18;
    private javax.swing.JButton classobjB19;
    private javax.swing.JButton classobjB2;
    private javax.swing.JButton classobjB20;
    private javax.swing.JButton classobjB21;
    private javax.swing.JButton classobjB22;
    private javax.swing.JButton classobjB23;
    private javax.swing.JButton classobjB24;
    private javax.swing.JButton classobjB25;
    private javax.swing.JButton classobjB26;
    private javax.swing.JButton classobjB27;
    private javax.swing.JButton classobjB28;
    private javax.swing.JButton classobjB29;
    private javax.swing.JButton classobjB3;
    private javax.swing.JButton classobjB4;
    private javax.swing.JButton classobjB5;
    private javax.swing.JButton classobjB6;
    private javax.swing.JButton classobjB7;
    private javax.swing.JButton classobjB8;
    private javax.swing.JButton classobjB9;
    private javax.swing.JButton elseifB;
    private javax.swing.JPanel eventspanel;
    private javax.swing.JPanel guipanel;
    private javax.swing.JButton ifbutton;
    private javax.swing.JButton ifelseB;
    private javax.swing.JButton inheritancB;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel jdbcpanel;
    private javax.swing.JPanel layoutspanel;
    private javax.swing.JButton nesterdB;
    private javax.swing.JPanel oopspanel;
    private javax.swing.JButton stringB;
    private javax.swing.JButton stringmaniB;
    private javax.swing.JPanel swingpanel;
    private javax.swing.JButton switchB;
    private javax.swing.JButton switchB1;
    private javax.swing.JButton switchB2;
    private javax.swing.JButton switchB3;
    private javax.swing.JTextArea text;
    // End of variables declaration//GEN-END:variables
}
